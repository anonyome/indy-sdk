// This file was autogenerated by some hot garbage in the `uniffi` crate.
// Trust me, you don't want to mess with it!

#pragma once

#include <stdbool.h>
#include <stdint.h>

// The following structs are used to implement the lowest level
// of the FFI, and thus useful to multiple uniffied crates.
// We ensure they are declared exactly once, with a header guard, UNIFFI_SHARED_H.
#ifdef UNIFFI_SHARED_H
    // We also try to prevent mixing versions of shared uniffi header structs.
    // If you add anything to the #else block, you must increment the version suffix in UNIFFI_SHARED_HEADER_V4
    #ifndef UNIFFI_SHARED_HEADER_V4
        #error Combining helper code from multiple versions of uniffi is not supported
    #endif // ndef UNIFFI_SHARED_HEADER_V4
#else
#define UNIFFI_SHARED_H
#define UNIFFI_SHARED_HEADER_V4
// ⚠️ Attention: If you change this #else block (ending in `#endif // def UNIFFI_SHARED_H`) you *must* ⚠️
// ⚠️ increment the version suffix in all instances of UNIFFI_SHARED_HEADER_V4 in this file.           ⚠️

typedef struct RustBuffer
{
    int32_t capacity;
    int32_t len;
    uint8_t *_Nullable data;
} RustBuffer;

typedef int32_t (*ForeignCallback)(uint64_t, int32_t, RustBuffer, RustBuffer *_Nonnull);

typedef struct ForeignBytes
{
    int32_t len;
    const uint8_t *_Nullable data;
} ForeignBytes;

// Error definitions
typedef struct RustCallStatus {
    int8_t code;
    RustBuffer errorBuf;
} RustCallStatus;

// ⚠️ Attention: If you change this #else block (ending in `#endif // def UNIFFI_SHARED_H`) you *must* ⚠️
// ⚠️ increment the version suffix in all instances of UNIFFI_SHARED_HEADER_V4 in this file.           ⚠️
#endif // def UNIFFI_SHARED_H

RustBuffer lib_16d0_set_runtime_config(
      RustBuffer config,
    RustCallStatus *_Nonnull out_status
    );
int32_t lib_16d0_open_reader(
      RustBuffer xtype,RustBuffer config_json,
    RustCallStatus *_Nonnull out_status
    );
int32_t lib_16d0_open_writer(
      RustBuffer xtype,RustBuffer config_json,
    RustCallStatus *_Nonnull out_status
    );
void lib_16d0_register_wallet_storage(
      RustBuffer xtype,
    RustCallStatus *_Nonnull out_status
    );
void lib_16d0_create_wallet(
      RustBuffer config,RustBuffer credentials,
    RustCallStatus *_Nonnull out_status
    );
int32_t lib_16d0_open_wallet(
      RustBuffer config,RustBuffer credentials,
    RustCallStatus *_Nonnull out_status
    );
void lib_16d0_export_wallet(
      int32_t wallet_handle,RustBuffer export_config,
    RustCallStatus *_Nonnull out_status
    );
void lib_16d0_import_wallet(
      RustBuffer config,RustBuffer credentials,RustBuffer import_config,
    RustCallStatus *_Nonnull out_status
    );
void lib_16d0_delete_wallet(
      RustBuffer config,RustBuffer credentials,
    RustCallStatus *_Nonnull out_status
    );
void lib_16d0_close_wallet(
      int32_t wallet_handle,
    RustCallStatus *_Nonnull out_status
    );
void lib_16d0_add_wallet_record(
      int32_t wallet_handle,RustBuffer xtype,RustBuffer id,RustBuffer value,RustBuffer tags_json,
    RustCallStatus *_Nonnull out_status
    );
void lib_16d0_update_wallet_record_value(
      int32_t wallet_handle,RustBuffer xtype,RustBuffer id,RustBuffer value,
    RustCallStatus *_Nonnull out_status
    );
void lib_16d0_update_wallet_record_tags(
      int32_t wallet_handle,RustBuffer xtype,RustBuffer id,RustBuffer tags_json,
    RustCallStatus *_Nonnull out_status
    );
void lib_16d0_add_wallet_record_tags(
      int32_t wallet_handle,RustBuffer xtype,RustBuffer id,RustBuffer tags_json,
    RustCallStatus *_Nonnull out_status
    );
void lib_16d0_delete_wallet_record_tags(
      int32_t wallet_handle,RustBuffer xtype,RustBuffer id,RustBuffer tag_names_json,
    RustCallStatus *_Nonnull out_status
    );
void lib_16d0_delete_wallet_record(
      int32_t wallet_handle,RustBuffer xtype,RustBuffer id,
    RustCallStatus *_Nonnull out_status
    );
RustBuffer lib_16d0_get_wallet_record(
      int32_t wallet_handle,RustBuffer xtype,RustBuffer id,RustBuffer options_json,
    RustCallStatus *_Nonnull out_status
    );
int32_t lib_16d0_open_wallet_search(
      int32_t wallet_handle,RustBuffer xtype,RustBuffer query_json,RustBuffer options_json,
    RustCallStatus *_Nonnull out_status
    );
RustBuffer lib_16d0_fetch_wallet_search_next_records(
      int32_t wallet_handle,int32_t wallet_search_handle,uint64_t count,
    RustCallStatus *_Nonnull out_status
    );
void lib_16d0_close_wallet_search(
      int32_t wallet_search_handle,
    RustCallStatus *_Nonnull out_status
    );
RustBuffer lib_16d0_generate_wallet_key(
      RustBuffer config,
    RustCallStatus *_Nonnull out_status
    );
void lib_16d0_create_pool_ledger_config(
      RustBuffer pool_name,RustBuffer pool_config,
    RustCallStatus *_Nonnull out_status
    );
int32_t lib_16d0_open_pool_ledger(
      RustBuffer pool_name,RustBuffer config,
    RustCallStatus *_Nonnull out_status
    );
void lib_16d0_refresh_pool_ledger(
      int32_t pool_handle,
    RustCallStatus *_Nonnull out_status
    );
RustBuffer lib_16d0_list_pools(
      
    RustCallStatus *_Nonnull out_status
    );
void lib_16d0_close_pool_ledger(
      int32_t pool_handle,
    RustCallStatus *_Nonnull out_status
    );
void lib_16d0_delete_pool_ledger(
      RustBuffer pool_name,
    RustCallStatus *_Nonnull out_status
    );
void lib_16d0_set_protocol_version(
      uint64_t protocol_version,
    RustCallStatus *_Nonnull out_status
    );
RustBuffer lib_16d0_create_and_store_my_did(
      int32_t wallet_handle,RustBuffer did_json,
    RustCallStatus *_Nonnull out_status
    );
RustBuffer lib_16d0_replace_keys_start(
      int32_t wallet_handle,RustBuffer tgt_did,RustBuffer identity_json,
    RustCallStatus *_Nonnull out_status
    );
void lib_16d0_replace_keys_apply(
      int32_t wallet_handle,RustBuffer tgt_did,
    RustCallStatus *_Nonnull out_status
    );
void lib_16d0_store_their_did(
      int32_t wallet_handle,RustBuffer identity_json,
    RustCallStatus *_Nonnull out_status
    );
RustBuffer lib_16d0_key_for_did(
      int32_t pool_handle,int32_t wallet_handle,RustBuffer did,
    RustCallStatus *_Nonnull out_status
    );
RustBuffer lib_16d0_key_for_local_did(
      int32_t wallet_handle,RustBuffer did,
    RustCallStatus *_Nonnull out_status
    );
void lib_16d0_set_endpoint_for_did(
      int32_t wallet_handle,RustBuffer did,RustBuffer address,RustBuffer transport_key,
    RustCallStatus *_Nonnull out_status
    );
RustBuffer lib_16d0_get_endpoint_for_did(
      int32_t wallet_handle,int32_t pool_handle,RustBuffer did,
    RustCallStatus *_Nonnull out_status
    );
void lib_16d0_set_did_metadata(
      int32_t wallet_handle,RustBuffer tgt_did,RustBuffer metadata,
    RustCallStatus *_Nonnull out_status
    );
RustBuffer lib_16d0_get_did_metadata(
      int32_t wallet_handle,RustBuffer tgt_did,
    RustCallStatus *_Nonnull out_status
    );
RustBuffer lib_16d0_get_my_did_with_metadata(
      int32_t wallet_handle,RustBuffer my_did,
    RustCallStatus *_Nonnull out_status
    );
RustBuffer lib_16d0_list_my_dids_with_metadata(
      int32_t wallet_handle,
    RustCallStatus *_Nonnull out_status
    );
RustBuffer lib_16d0_abbreviate_verkey(
      RustBuffer tgt_did,RustBuffer verkey,
    RustCallStatus *_Nonnull out_status
    );
RustBuffer lib_16d0_qualify_did(
      int32_t wallet_handle,RustBuffer did,RustBuffer method,
    RustCallStatus *_Nonnull out_status
    );
RustBuffer lib_16d0_get_schema(
      int32_t pool_handle,int32_t wallet_handle,RustBuffer submitter_did,RustBuffer id,RustBuffer options_json,
    RustCallStatus *_Nonnull out_status
    );
RustBuffer lib_16d0_get_cred_def(
      int32_t pool_handle,int32_t wallet_handle,RustBuffer submitter_did,RustBuffer id,RustBuffer options_json,
    RustCallStatus *_Nonnull out_status
    );
void lib_16d0_purge_schema_cache(
      int32_t wallet_handle,RustBuffer options_json,
    RustCallStatus *_Nonnull out_status
    );
void lib_16d0_purge_cred_def_cache(
      int32_t wallet_handle,RustBuffer options_json,
    RustCallStatus *_Nonnull out_status
    );
RustBuffer lib_16d0_create_key(
      int32_t wallet_handle,RustBuffer my_key_json,
    RustCallStatus *_Nonnull out_status
    );
void lib_16d0_set_key_metadata(
      int32_t wallet_handle,RustBuffer verkey,RustBuffer metadata,
    RustCallStatus *_Nonnull out_status
    );
RustBuffer lib_16d0_get_key_metadata(
      int32_t wallet_handle,RustBuffer verkey,
    RustCallStatus *_Nonnull out_status
    );
RustBuffer lib_16d0_sign(
      int32_t wallet_handle,RustBuffer signer_vk,RustBuffer message,
    RustCallStatus *_Nonnull out_status
    );
int8_t lib_16d0_verify(
      RustBuffer signer_vk,RustBuffer message,RustBuffer signature,
    RustCallStatus *_Nonnull out_status
    );
RustBuffer lib_16d0_auth_crypt(
      int32_t wallet_handle,RustBuffer sender_vk,RustBuffer recipient_vk,RustBuffer message,
    RustCallStatus *_Nonnull out_status
    );
RustBuffer lib_16d0_auth_decrypt(
      int32_t wallet_handle,RustBuffer recipient_vk,RustBuffer encrypted_message,
    RustCallStatus *_Nonnull out_status
    );
RustBuffer lib_16d0_anon_crypt(
      RustBuffer recipient_vk,RustBuffer message,
    RustCallStatus *_Nonnull out_status
    );
RustBuffer lib_16d0_anon_decrypt(
      int32_t wallet_handle,RustBuffer recipient_vk,RustBuffer encrypted_message,
    RustCallStatus *_Nonnull out_status
    );
RustBuffer lib_16d0_pack_message(
      int32_t wallet_handle,RustBuffer message,RustBuffer receiver_keys,RustBuffer sender,
    RustCallStatus *_Nonnull out_status
    );
RustBuffer lib_16d0_unpack_message(
      int32_t wallet_handle,RustBuffer jwe,
    RustCallStatus *_Nonnull out_status
    );
RustBuffer ffi_lib_16d0_rustbuffer_alloc(
      int32_t size,
    RustCallStatus *_Nonnull out_status
    );
RustBuffer ffi_lib_16d0_rustbuffer_from_bytes(
      ForeignBytes bytes,
    RustCallStatus *_Nonnull out_status
    );
void ffi_lib_16d0_rustbuffer_free(
      RustBuffer buf,
    RustCallStatus *_Nonnull out_status
    );
RustBuffer ffi_lib_16d0_rustbuffer_reserve(
      RustBuffer buf,int32_t additional,
    RustCallStatus *_Nonnull out_status
    );
