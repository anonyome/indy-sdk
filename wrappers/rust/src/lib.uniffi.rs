// This file was autogenerated by some hot garbage in the `uniffi` crate.
// Trust me, you don't want to mess with it!

// Check for compatibility between `uniffi` and `uniffi_bindgen` versions.
// Note that we have an error message on the same line as the assertion.
// This is important, because if the assertion fails, the compiler only
// seems to show that single line as context for the user.
uniffi::assert_compatible_version!("0.16.0"); // Please check that you depend on version 0.16.0 of the `uniffi` crate.

// Everybody gets basic buffer support, since it's needed for passing complex types over the FFI.

/// This helper allocates a new byte buffer owned by the Rust code, and returns it
/// to the foreign-language code as a `RustBuffer` struct. Callers must eventually
/// free the resulting buffer, either by explicitly calling the destructor defined below,
/// or by passing ownership of the buffer back into Rust code.
#[doc(hidden)]
#[no_mangle]
pub extern "C" fn ffi_lib_16d0_rustbuffer_alloc(
    size: i32,
    call_status: &mut uniffi::RustCallStatus,
) -> uniffi::RustBuffer {
    uniffi::call_with_output(call_status, || {
        uniffi::RustBuffer::new_with_size(size.max(0) as usize)
    })
}

/// This helper copies bytes owned by the foreign-language code into a new byte buffer owned
/// by the Rust code, and returns it as a `RustBuffer` struct. Callers must eventually
/// free the resulting buffer, either by explicitly calling the destructor defined below,
/// or by passing ownership of the buffer back into Rust code.
///
/// # Safety
/// This function will dereference a provided pointer in order to copy bytes from it, so
/// make sure the `ForeignBytes` struct contains a valid pointer and length.
#[doc(hidden)]
#[no_mangle]
pub unsafe extern "C" fn ffi_lib_16d0_rustbuffer_from_bytes(
    bytes: uniffi::ForeignBytes,
    call_status: &mut uniffi::RustCallStatus,
) -> uniffi::RustBuffer {
    uniffi::call_with_output(call_status, || {
        let bytes = bytes.as_slice();
        uniffi::RustBuffer::from_vec(bytes.to_vec())
    })
}

/// Free a byte buffer that had previously been passed to the foreign language code.
///
/// # Safety
/// The argument *must* be a uniquely-owned `RustBuffer` previously obtained from a call
/// into the Rust code that returned a buffer, or you'll risk freeing unowned memory or
/// corrupting the allocator state.
#[doc(hidden)]
#[no_mangle]
pub unsafe extern "C" fn ffi_lib_16d0_rustbuffer_free(
    buf: uniffi::RustBuffer,
    call_status: &mut uniffi::RustCallStatus,
) {
    uniffi::call_with_output(call_status, || uniffi::RustBuffer::destroy(buf))
}

/// Reserve additional capacity in a byte buffer that had previously been passed to the
/// foreign language code.
///
/// The first argument *must* be a uniquely-owned `RustBuffer` previously
/// obtained from a call into the Rust code that returned a buffer. Its underlying data pointer
/// will be reallocated if necessary and returned in a new `RustBuffer` struct.
///
/// The second argument must be the minimum number of *additional* bytes to reserve
/// capacity for in the buffer; it is likely to reserve additional capacity in practice
/// due to amortized growth strategy of Rust vectors.
///
/// # Safety
/// The first argument *must* be a uniquely-owned `RustBuffer` previously obtained from a call
/// into the Rust code that returned a buffer, or you'll risk freeing unowned memory or
/// corrupting the allocator state.
#[doc(hidden)]
#[no_mangle]
pub unsafe extern "C" fn ffi_lib_16d0_rustbuffer_reserve(
    buf: uniffi::RustBuffer,
    additional: i32,
    call_status: &mut uniffi::RustCallStatus,
) -> uniffi::RustBuffer {
    uniffi::call_with_output(call_status, || {
        use std::convert::TryInto;
        let additional: usize = additional
            .try_into()
            .expect("additional buffer length negative or overflowed");
        let mut v = buf.destroy_into_vec();
        v.reserve(additional);
        uniffi::RustBuffer::from_vec(v)
    })
}

// Error definitions, corresponding to `error` in the UDL.

#[doc(hidden)]
pub struct FfiConverterTypeErrorCode;

#[doc(hidden)]
impl uniffi::RustBufferFfiConverter for FfiConverterTypeErrorCode {
    type RustType = ErrorCode;

    // For "flat" error enums, we stringify the error on the Rust side and surface that
    // as the error message in the foreign language.

    fn write(obj: ErrorCode, buf: &mut std::vec::Vec<u8>) {
        use uniffi::deps::bytes::BufMut;
        let msg = obj.to_string();
        match obj {
            ErrorCode::Success { .. } => {
                buf.put_i32(1);
                <String as uniffi::FfiConverter>::write(msg, buf);
            }
            ErrorCode::CommonInvalidParam1 { .. } => {
                buf.put_i32(2);
                <String as uniffi::FfiConverter>::write(msg, buf);
            }
            ErrorCode::CommonInvalidParam2 { .. } => {
                buf.put_i32(3);
                <String as uniffi::FfiConverter>::write(msg, buf);
            }
            ErrorCode::CommonInvalidParam3 { .. } => {
                buf.put_i32(4);
                <String as uniffi::FfiConverter>::write(msg, buf);
            }
            ErrorCode::CommonInvalidParam4 { .. } => {
                buf.put_i32(5);
                <String as uniffi::FfiConverter>::write(msg, buf);
            }
            ErrorCode::CommonInvalidParam5 { .. } => {
                buf.put_i32(6);
                <String as uniffi::FfiConverter>::write(msg, buf);
            }
            ErrorCode::CommonInvalidParam6 { .. } => {
                buf.put_i32(7);
                <String as uniffi::FfiConverter>::write(msg, buf);
            }
            ErrorCode::CommonInvalidParam7 { .. } => {
                buf.put_i32(8);
                <String as uniffi::FfiConverter>::write(msg, buf);
            }
            ErrorCode::CommonInvalidParam8 { .. } => {
                buf.put_i32(9);
                <String as uniffi::FfiConverter>::write(msg, buf);
            }
            ErrorCode::CommonInvalidParam9 { .. } => {
                buf.put_i32(10);
                <String as uniffi::FfiConverter>::write(msg, buf);
            }
            ErrorCode::CommonInvalidParam10 { .. } => {
                buf.put_i32(11);
                <String as uniffi::FfiConverter>::write(msg, buf);
            }
            ErrorCode::CommonInvalidParam11 { .. } => {
                buf.put_i32(12);
                <String as uniffi::FfiConverter>::write(msg, buf);
            }
            ErrorCode::CommonInvalidParam12 { .. } => {
                buf.put_i32(13);
                <String as uniffi::FfiConverter>::write(msg, buf);
            }
            ErrorCode::CommonInvalidState { .. } => {
                buf.put_i32(14);
                <String as uniffi::FfiConverter>::write(msg, buf);
            }
            ErrorCode::CommonInvalidStructure { .. } => {
                buf.put_i32(15);
                <String as uniffi::FfiConverter>::write(msg, buf);
            }
            ErrorCode::CommonIOError { .. } => {
                buf.put_i32(16);
                <String as uniffi::FfiConverter>::write(msg, buf);
            }
            ErrorCode::CommonInvalidParam13 { .. } => {
                buf.put_i32(17);
                <String as uniffi::FfiConverter>::write(msg, buf);
            }
            ErrorCode::CommonInvalidParam14 { .. } => {
                buf.put_i32(18);
                <String as uniffi::FfiConverter>::write(msg, buf);
            }
            ErrorCode::CommonInvalidParam15 { .. } => {
                buf.put_i32(19);
                <String as uniffi::FfiConverter>::write(msg, buf);
            }
            ErrorCode::CommonInvalidParam16 { .. } => {
                buf.put_i32(20);
                <String as uniffi::FfiConverter>::write(msg, buf);
            }
            ErrorCode::CommonInvalidParam17 { .. } => {
                buf.put_i32(21);
                <String as uniffi::FfiConverter>::write(msg, buf);
            }
            ErrorCode::CommonInvalidParam18 { .. } => {
                buf.put_i32(22);
                <String as uniffi::FfiConverter>::write(msg, buf);
            }
            ErrorCode::CommonInvalidParam19 { .. } => {
                buf.put_i32(23);
                <String as uniffi::FfiConverter>::write(msg, buf);
            }
            ErrorCode::CommonInvalidParam20 { .. } => {
                buf.put_i32(24);
                <String as uniffi::FfiConverter>::write(msg, buf);
            }
            ErrorCode::CommonInvalidParam21 { .. } => {
                buf.put_i32(25);
                <String as uniffi::FfiConverter>::write(msg, buf);
            }
            ErrorCode::CommonInvalidParam22 { .. } => {
                buf.put_i32(26);
                <String as uniffi::FfiConverter>::write(msg, buf);
            }
            ErrorCode::CommonInvalidParam23 { .. } => {
                buf.put_i32(27);
                <String as uniffi::FfiConverter>::write(msg, buf);
            }
            ErrorCode::CommonInvalidParam24 { .. } => {
                buf.put_i32(28);
                <String as uniffi::FfiConverter>::write(msg, buf);
            }
            ErrorCode::CommonInvalidParam25 { .. } => {
                buf.put_i32(29);
                <String as uniffi::FfiConverter>::write(msg, buf);
            }
            ErrorCode::CommonInvalidParam26 { .. } => {
                buf.put_i32(30);
                <String as uniffi::FfiConverter>::write(msg, buf);
            }
            ErrorCode::CommonInvalidParam27 { .. } => {
                buf.put_i32(31);
                <String as uniffi::FfiConverter>::write(msg, buf);
            }
            ErrorCode::WalletInvalidHandle { .. } => {
                buf.put_i32(32);
                <String as uniffi::FfiConverter>::write(msg, buf);
            }
            ErrorCode::WalletUnknownTypeError { .. } => {
                buf.put_i32(33);
                <String as uniffi::FfiConverter>::write(msg, buf);
            }
            ErrorCode::WalletTypeAlreadyRegisteredError { .. } => {
                buf.put_i32(34);
                <String as uniffi::FfiConverter>::write(msg, buf);
            }
            ErrorCode::WalletAlreadyExistsError { .. } => {
                buf.put_i32(35);
                <String as uniffi::FfiConverter>::write(msg, buf);
            }
            ErrorCode::WalletNotFoundError { .. } => {
                buf.put_i32(36);
                <String as uniffi::FfiConverter>::write(msg, buf);
            }
            ErrorCode::WalletIncompatiblePoolError { .. } => {
                buf.put_i32(37);
                <String as uniffi::FfiConverter>::write(msg, buf);
            }
            ErrorCode::WalletAlreadyOpenedError { .. } => {
                buf.put_i32(38);
                <String as uniffi::FfiConverter>::write(msg, buf);
            }
            ErrorCode::WalletAccessFailed { .. } => {
                buf.put_i32(39);
                <String as uniffi::FfiConverter>::write(msg, buf);
            }
            ErrorCode::WalletInputError { .. } => {
                buf.put_i32(40);
                <String as uniffi::FfiConverter>::write(msg, buf);
            }
            ErrorCode::WalletDecodingError { .. } => {
                buf.put_i32(41);
                <String as uniffi::FfiConverter>::write(msg, buf);
            }
            ErrorCode::WalletStorageError { .. } => {
                buf.put_i32(42);
                <String as uniffi::FfiConverter>::write(msg, buf);
            }
            ErrorCode::WalletEncryptionError { .. } => {
                buf.put_i32(43);
                <String as uniffi::FfiConverter>::write(msg, buf);
            }
            ErrorCode::WalletItemNotFound { .. } => {
                buf.put_i32(44);
                <String as uniffi::FfiConverter>::write(msg, buf);
            }
            ErrorCode::WalletItemAlreadyExists { .. } => {
                buf.put_i32(45);
                <String as uniffi::FfiConverter>::write(msg, buf);
            }
            ErrorCode::WalletQueryError { .. } => {
                buf.put_i32(46);
                <String as uniffi::FfiConverter>::write(msg, buf);
            }
            ErrorCode::PoolLedgerNotCreatedError { .. } => {
                buf.put_i32(47);
                <String as uniffi::FfiConverter>::write(msg, buf);
            }
            ErrorCode::PoolLedgerInvalidi32 { .. } => {
                buf.put_i32(48);
                <String as uniffi::FfiConverter>::write(msg, buf);
            }
            ErrorCode::PoolLedgerTerminated { .. } => {
                buf.put_i32(49);
                <String as uniffi::FfiConverter>::write(msg, buf);
            }
            ErrorCode::LedgerNoConsensusError { .. } => {
                buf.put_i32(50);
                <String as uniffi::FfiConverter>::write(msg, buf);
            }
            ErrorCode::LedgerInvalidTransaction { .. } => {
                buf.put_i32(51);
                <String as uniffi::FfiConverter>::write(msg, buf);
            }
            ErrorCode::LedgerSecurityError { .. } => {
                buf.put_i32(52);
                <String as uniffi::FfiConverter>::write(msg, buf);
            }
            ErrorCode::PoolLedgerConfigAlreadyExistsError { .. } => {
                buf.put_i32(53);
                <String as uniffi::FfiConverter>::write(msg, buf);
            }
            ErrorCode::PoolLedgerTimeout { .. } => {
                buf.put_i32(54);
                <String as uniffi::FfiConverter>::write(msg, buf);
            }
            ErrorCode::PoolIncompatibleProtocolVersion { .. } => {
                buf.put_i32(55);
                <String as uniffi::FfiConverter>::write(msg, buf);
            }
            ErrorCode::LedgerNotFound { .. } => {
                buf.put_i32(56);
                <String as uniffi::FfiConverter>::write(msg, buf);
            }
            ErrorCode::AnoncredsRevocationRegistryFullError { .. } => {
                buf.put_i32(57);
                <String as uniffi::FfiConverter>::write(msg, buf);
            }
            ErrorCode::AnoncredsInvalidUserRevocId { .. } => {
                buf.put_i32(58);
                <String as uniffi::FfiConverter>::write(msg, buf);
            }
            ErrorCode::AnoncredsMasterSecretDuplicateNameError { .. } => {
                buf.put_i32(59);
                <String as uniffi::FfiConverter>::write(msg, buf);
            }
            ErrorCode::AnoncredsProofRejected { .. } => {
                buf.put_i32(60);
                <String as uniffi::FfiConverter>::write(msg, buf);
            }
            ErrorCode::AnoncredsCredentialRevoked { .. } => {
                buf.put_i32(61);
                <String as uniffi::FfiConverter>::write(msg, buf);
            }
            ErrorCode::AnoncredsCredDefAlreadyExistsError { .. } => {
                buf.put_i32(62);
                <String as uniffi::FfiConverter>::write(msg, buf);
            }
            ErrorCode::UnknownCryptoTypeError { .. } => {
                buf.put_i32(63);
                <String as uniffi::FfiConverter>::write(msg, buf);
            }
            ErrorCode::DidAlreadyExistsError { .. } => {
                buf.put_i32(64);
                <String as uniffi::FfiConverter>::write(msg, buf);
            }
            ErrorCode::UnknownPaymentMethod { .. } => {
                buf.put_i32(65);
                <String as uniffi::FfiConverter>::write(msg, buf);
            }
            ErrorCode::IncompatiblePaymentError { .. } => {
                buf.put_i32(66);
                <String as uniffi::FfiConverter>::write(msg, buf);
            }
            ErrorCode::PaymentInsufficientFundsError { .. } => {
                buf.put_i32(67);
                <String as uniffi::FfiConverter>::write(msg, buf);
            }
            ErrorCode::PaymentSourceDoesNotExistError { .. } => {
                buf.put_i32(68);
                <String as uniffi::FfiConverter>::write(msg, buf);
            }
            ErrorCode::PaymentOperationNotSupportedError { .. } => {
                buf.put_i32(69);
                <String as uniffi::FfiConverter>::write(msg, buf);
            }
            ErrorCode::PaymentExtraFundsError { .. } => {
                buf.put_i32(70);
                <String as uniffi::FfiConverter>::write(msg, buf);
            }
            ErrorCode::TransactionNotAllowed { .. } => {
                buf.put_i32(71);
                <String as uniffi::FfiConverter>::write(msg, buf);
            }
        };
    }

    fn try_read(_buf: &mut &[u8]) -> uniffi::deps::anyhow::Result<ErrorCode> {
        // It's not currently possible to send errors from the foreign language *into* Rust.
        panic!("try_read not supported for flat errors");
    }
}

impl uniffi::FfiError for FfiConverterTypeErrorCode {}

#[doc(hidden)]
pub struct FfiConverterTypeIndyError2;

#[doc(hidden)]
impl uniffi::RustBufferFfiConverter for FfiConverterTypeIndyError2 {
    type RustType = IndyError2;

    // For "flat" error enums, we stringify the error on the Rust side and surface that
    // as the error message in the foreign language.

    fn write(obj: IndyError2, buf: &mut std::vec::Vec<u8>) {
        use uniffi::deps::bytes::BufMut;
        let msg = obj.to_string();
        match obj {
            IndyError2::ErrorResult { .. } => {
                buf.put_i32(1);
                <String as uniffi::FfiConverter>::write(msg, buf);
            }
        };
    }

    fn try_read(_buf: &mut &[u8]) -> uniffi::deps::anyhow::Result<IndyError2> {
        // It's not currently possible to send errors from the foreign language *into* Rust.
        panic!("try_read not supported for flat errors");
    }
}

impl uniffi::FfiError for FfiConverterTypeIndyError2 {}

// Enum defitions, corresponding to `enum` in UDL.

// Record definitions, implemented as method-less structs, corresponding to `dictionary` objects.

#[doc(hidden)]
pub struct FfiConverterTypeIndyError;

#[doc(hidden)]
impl uniffi::RustBufferFfiConverter for FfiConverterTypeIndyError {
    type RustType = IndyError;

    fn write(obj: IndyError, buf: &mut std::vec::Vec<u8>) {
        // If the provided struct doesn't match the fields declared in the UDL, then
        // the generated code here will fail to compile with somewhat helpful error.
        <FfiConverterTypeErrorCode as uniffi::FfiConverter>::write(obj.error_code, buf);
        <String as uniffi::FfiConverter>::write(obj.message, buf);
        <std::option::Option<String> as uniffi::FfiConverter>::write(obj.indy_backtrace, buf);
    }

    fn try_read(buf: &mut &[u8]) -> uniffi::deps::anyhow::Result<IndyError> {
        Ok(IndyError {
            error_code: <FfiConverterTypeErrorCode as uniffi::FfiConverter>::try_read(buf)?,
            message: <String as uniffi::FfiConverter>::try_read(buf)?,
            indy_backtrace: <std::option::Option<String> as uniffi::FfiConverter>::try_read(buf)?,
        })
    }
}

#[doc(hidden)]
pub struct FfiConverterTypeErrorDetails;

#[doc(hidden)]
impl uniffi::RustBufferFfiConverter for FfiConverterTypeErrorDetails {
    type RustType = ErrorDetails;

    fn write(obj: ErrorDetails, buf: &mut std::vec::Vec<u8>) {
        // If the provided struct doesn't match the fields declared in the UDL, then
        // the generated code here will fail to compile with somewhat helpful error.
        <String as uniffi::FfiConverter>::write(obj.message, buf);
        <std::option::Option<String> as uniffi::FfiConverter>::write(obj.backtrace, buf);
    }

    fn try_read(buf: &mut &[u8]) -> uniffi::deps::anyhow::Result<ErrorDetails> {
        Ok(ErrorDetails {
            message: <String as uniffi::FfiConverter>::try_read(buf)?,
            backtrace: <std::option::Option<String> as uniffi::FfiConverter>::try_read(buf)?,
        })
    }
}

#[doc(hidden)]
pub struct FfiConverterTypeStringString;

#[doc(hidden)]
impl uniffi::RustBufferFfiConverter for FfiConverterTypeStringString {
    type RustType = StringString;

    fn write(obj: StringString, buf: &mut std::vec::Vec<u8>) {
        // If the provided struct doesn't match the fields declared in the UDL, then
        // the generated code here will fail to compile with somewhat helpful error.
        <String as uniffi::FfiConverter>::write(obj.i0, buf);
        <String as uniffi::FfiConverter>::write(obj.i1, buf);
    }

    fn try_read(buf: &mut &[u8]) -> uniffi::deps::anyhow::Result<StringString> {
        Ok(StringString {
            i0: <String as uniffi::FfiConverter>::try_read(buf)?,
            i1: <String as uniffi::FfiConverter>::try_read(buf)?,
        })
    }
}

#[doc(hidden)]
pub struct FfiConverterTypeStringOptString;

#[doc(hidden)]
impl uniffi::RustBufferFfiConverter for FfiConverterTypeStringOptString {
    type RustType = StringOptString;

    fn write(obj: StringOptString, buf: &mut std::vec::Vec<u8>) {
        // If the provided struct doesn't match the fields declared in the UDL, then
        // the generated code here will fail to compile with somewhat helpful error.
        <String as uniffi::FfiConverter>::write(obj.i0, buf);
        <std::option::Option<String> as uniffi::FfiConverter>::write(obj.i1, buf);
    }

    fn try_read(buf: &mut &[u8]) -> uniffi::deps::anyhow::Result<StringOptString> {
        Ok(StringOptString {
            i0: <String as uniffi::FfiConverter>::try_read(buf)?,
            i1: <std::option::Option<String> as uniffi::FfiConverter>::try_read(buf)?,
        })
    }
}

#[doc(hidden)]
pub struct FfiConverterTypeStringVecU8;

#[doc(hidden)]
impl uniffi::RustBufferFfiConverter for FfiConverterTypeStringVecU8 {
    type RustType = StringVecU8;

    fn write(obj: StringVecU8, buf: &mut std::vec::Vec<u8>) {
        // If the provided struct doesn't match the fields declared in the UDL, then
        // the generated code here will fail to compile with somewhat helpful error.
        <String as uniffi::FfiConverter>::write(obj.i0, buf);
        <std::vec::Vec<u8> as uniffi::FfiConverter>::write(obj.i1, buf);
    }

    fn try_read(buf: &mut &[u8]) -> uniffi::deps::anyhow::Result<StringVecU8> {
        Ok(StringVecU8 {
            i0: <String as uniffi::FfiConverter>::try_read(buf)?,
            i1: <std::vec::Vec<u8> as uniffi::FfiConverter>::try_read(buf)?,
        })
    }
}

// Top level functions, corresponding to UDL `namespace` functions.

#[doc(hidden)]
#[no_mangle]
pub extern "C" fn lib_16d0_set_runtime_config(
    config: uniffi::RustBuffer,
    call_status: &mut uniffi::RustCallStatus,
) -> uniffi::RustBuffer {
    // If the provided function does not match the signature specified in the UDL
    // then this attempt to call it will not compile, and will give guidance as to why.
    uniffi::deps::log::debug!("lib_16d0_set_runtime_config");

    uniffi::call_with_output(call_status, || {
        <FfiConverterTypeErrorCode as uniffi::FfiConverter>::lower(set_runtime_config(
            match <String as uniffi::FfiConverter>::try_lift(config) {
                Ok(ref val) => val,

                Err(err) => panic!("Failed to convert arg '{}': {}", "config", err),
            },
        ))
    })
}

#[doc(hidden)]
#[no_mangle]
pub extern "C" fn lib_16d0_open_reader(
    xtype: uniffi::RustBuffer,
    config_json: uniffi::RustBuffer,
    call_status: &mut uniffi::RustCallStatus,
) -> i32 {
    // If the provided function does not match the signature specified in the UDL
    // then this attempt to call it will not compile, and will give guidance as to why.
    uniffi::deps::log::debug!("lib_16d0_open_reader");

    uniffi::call_with_result(call_status, || {
        let _retval = open_reader(
            match <String as uniffi::FfiConverter>::try_lift(xtype) {
                Ok(ref val) => val,

                Err(err) => {
                    return Err(uniffi::lower_anyhow_error_or_panic::<
                        FfiConverterTypeIndyError2,
                    >(err, "xtype"))
                }
            },
            match <String as uniffi::FfiConverter>::try_lift(config_json) {
                Ok(ref val) => val,

                Err(err) => {
                    return Err(uniffi::lower_anyhow_error_or_panic::<
                        FfiConverterTypeIndyError2,
                    >(err, "config_json"))
                }
            },
        )
        .map_err(Into::into)
        .map_err(<FfiConverterTypeIndyError2 as uniffi::FfiConverter>::lower)?;
        Ok(<i32 as uniffi::FfiConverter>::lower(_retval))
    })
}

#[doc(hidden)]
#[no_mangle]
pub extern "C" fn lib_16d0_open_writer(
    xtype: uniffi::RustBuffer,
    config_json: uniffi::RustBuffer,
    call_status: &mut uniffi::RustCallStatus,
) -> i32 {
    // If the provided function does not match the signature specified in the UDL
    // then this attempt to call it will not compile, and will give guidance as to why.
    uniffi::deps::log::debug!("lib_16d0_open_writer");

    uniffi::call_with_result(call_status, || {
        let _retval = open_writer(
            match <String as uniffi::FfiConverter>::try_lift(xtype) {
                Ok(ref val) => val,

                Err(err) => {
                    return Err(uniffi::lower_anyhow_error_or_panic::<
                        FfiConverterTypeIndyError2,
                    >(err, "xtype"))
                }
            },
            match <String as uniffi::FfiConverter>::try_lift(config_json) {
                Ok(ref val) => val,

                Err(err) => {
                    return Err(uniffi::lower_anyhow_error_or_panic::<
                        FfiConverterTypeIndyError2,
                    >(err, "config_json"))
                }
            },
        )
        .map_err(Into::into)
        .map_err(<FfiConverterTypeIndyError2 as uniffi::FfiConverter>::lower)?;
        Ok(<i32 as uniffi::FfiConverter>::lower(_retval))
    })
}

#[doc(hidden)]
#[no_mangle]
pub extern "C" fn lib_16d0_register_wallet_storage(
    xtype: uniffi::RustBuffer,
    call_status: &mut uniffi::RustCallStatus,
) {
    // If the provided function does not match the signature specified in the UDL
    // then this attempt to call it will not compile, and will give guidance as to why.
    uniffi::deps::log::debug!("lib_16d0_register_wallet_storage");

    uniffi::call_with_result(call_status, || {
        let _retval =
            register_wallet_storage(match <String as uniffi::FfiConverter>::try_lift(xtype) {
                Ok(ref val) => val,

                Err(err) => {
                    return Err(uniffi::lower_anyhow_error_or_panic::<
                        FfiConverterTypeIndyError2,
                    >(err, "xtype"))
                }
            })
            .map_err(Into::into)
            .map_err(<FfiConverterTypeIndyError2 as uniffi::FfiConverter>::lower)?;
        Ok(_retval)
    })
}

#[doc(hidden)]
#[no_mangle]
pub extern "C" fn lib_16d0_create_wallet(
    config: uniffi::RustBuffer,
    credentials: uniffi::RustBuffer,
    call_status: &mut uniffi::RustCallStatus,
) {
    // If the provided function does not match the signature specified in the UDL
    // then this attempt to call it will not compile, and will give guidance as to why.
    uniffi::deps::log::debug!("lib_16d0_create_wallet");

    uniffi::call_with_result(call_status, || {
        let _retval = create_wallet(
            match <String as uniffi::FfiConverter>::try_lift(config) {
                Ok(ref val) => val,

                Err(err) => {
                    return Err(uniffi::lower_anyhow_error_or_panic::<
                        FfiConverterTypeIndyError2,
                    >(err, "config"))
                }
            },
            match <String as uniffi::FfiConverter>::try_lift(credentials) {
                Ok(ref val) => val,

                Err(err) => {
                    return Err(uniffi::lower_anyhow_error_or_panic::<
                        FfiConverterTypeIndyError2,
                    >(err, "credentials"))
                }
            },
        )
        .map_err(Into::into)
        .map_err(<FfiConverterTypeIndyError2 as uniffi::FfiConverter>::lower)?;
        Ok(_retval)
    })
}

#[doc(hidden)]
#[no_mangle]
pub extern "C" fn lib_16d0_open_wallet(
    config: uniffi::RustBuffer,
    credentials: uniffi::RustBuffer,
    call_status: &mut uniffi::RustCallStatus,
) -> i32 {
    // If the provided function does not match the signature specified in the UDL
    // then this attempt to call it will not compile, and will give guidance as to why.
    uniffi::deps::log::debug!("lib_16d0_open_wallet");

    uniffi::call_with_result(call_status, || {
        let _retval = open_wallet(
            match <String as uniffi::FfiConverter>::try_lift(config) {
                Ok(ref val) => val,

                Err(err) => {
                    return Err(uniffi::lower_anyhow_error_or_panic::<
                        FfiConverterTypeIndyError2,
                    >(err, "config"))
                }
            },
            match <String as uniffi::FfiConverter>::try_lift(credentials) {
                Ok(ref val) => val,

                Err(err) => {
                    return Err(uniffi::lower_anyhow_error_or_panic::<
                        FfiConverterTypeIndyError2,
                    >(err, "credentials"))
                }
            },
        )
        .map_err(Into::into)
        .map_err(<FfiConverterTypeIndyError2 as uniffi::FfiConverter>::lower)?;
        Ok(<i32 as uniffi::FfiConverter>::lower(_retval))
    })
}

#[doc(hidden)]
#[no_mangle]
pub extern "C" fn lib_16d0_export_wallet(
    wallet_handle: i32,
    export_config: uniffi::RustBuffer,
    call_status: &mut uniffi::RustCallStatus,
) {
    // If the provided function does not match the signature specified in the UDL
    // then this attempt to call it will not compile, and will give guidance as to why.
    uniffi::deps::log::debug!("lib_16d0_export_wallet");

    uniffi::call_with_result(call_status, || {
        let _retval = export_wallet(
            match <i32 as uniffi::FfiConverter>::try_lift(wallet_handle) {
                Ok(val) => val,

                Err(err) => {
                    return Err(uniffi::lower_anyhow_error_or_panic::<
                        FfiConverterTypeIndyError2,
                    >(err, "wallet_handle"))
                }
            },
            match <String as uniffi::FfiConverter>::try_lift(export_config) {
                Ok(ref val) => val,

                Err(err) => {
                    return Err(uniffi::lower_anyhow_error_or_panic::<
                        FfiConverterTypeIndyError2,
                    >(err, "export_config"))
                }
            },
        )
        .map_err(Into::into)
        .map_err(<FfiConverterTypeIndyError2 as uniffi::FfiConverter>::lower)?;
        Ok(_retval)
    })
}

#[doc(hidden)]
#[no_mangle]
pub extern "C" fn lib_16d0_import_wallet(
    config: uniffi::RustBuffer,
    credentials: uniffi::RustBuffer,
    import_config: uniffi::RustBuffer,
    call_status: &mut uniffi::RustCallStatus,
) {
    // If the provided function does not match the signature specified in the UDL
    // then this attempt to call it will not compile, and will give guidance as to why.
    uniffi::deps::log::debug!("lib_16d0_import_wallet");

    uniffi::call_with_result(call_status, || {
        let _retval = import_wallet(
            match <String as uniffi::FfiConverter>::try_lift(config) {
                Ok(ref val) => val,

                Err(err) => {
                    return Err(uniffi::lower_anyhow_error_or_panic::<
                        FfiConverterTypeIndyError2,
                    >(err, "config"))
                }
            },
            match <String as uniffi::FfiConverter>::try_lift(credentials) {
                Ok(ref val) => val,

                Err(err) => {
                    return Err(uniffi::lower_anyhow_error_or_panic::<
                        FfiConverterTypeIndyError2,
                    >(err, "credentials"))
                }
            },
            match <String as uniffi::FfiConverter>::try_lift(import_config) {
                Ok(ref val) => val,

                Err(err) => {
                    return Err(uniffi::lower_anyhow_error_or_panic::<
                        FfiConverterTypeIndyError2,
                    >(err, "import_config"))
                }
            },
        )
        .map_err(Into::into)
        .map_err(<FfiConverterTypeIndyError2 as uniffi::FfiConverter>::lower)?;
        Ok(_retval)
    })
}

#[doc(hidden)]
#[no_mangle]
pub extern "C" fn lib_16d0_delete_wallet(
    config: uniffi::RustBuffer,
    credentials: uniffi::RustBuffer,
    call_status: &mut uniffi::RustCallStatus,
) {
    // If the provided function does not match the signature specified in the UDL
    // then this attempt to call it will not compile, and will give guidance as to why.
    uniffi::deps::log::debug!("lib_16d0_delete_wallet");

    uniffi::call_with_result(call_status, || {
        let _retval = delete_wallet(
            match <String as uniffi::FfiConverter>::try_lift(config) {
                Ok(ref val) => val,

                Err(err) => {
                    return Err(uniffi::lower_anyhow_error_or_panic::<
                        FfiConverterTypeIndyError2,
                    >(err, "config"))
                }
            },
            match <String as uniffi::FfiConverter>::try_lift(credentials) {
                Ok(ref val) => val,

                Err(err) => {
                    return Err(uniffi::lower_anyhow_error_or_panic::<
                        FfiConverterTypeIndyError2,
                    >(err, "credentials"))
                }
            },
        )
        .map_err(Into::into)
        .map_err(<FfiConverterTypeIndyError2 as uniffi::FfiConverter>::lower)?;
        Ok(_retval)
    })
}

#[doc(hidden)]
#[no_mangle]
pub extern "C" fn lib_16d0_close_wallet(
    wallet_handle: i32,
    call_status: &mut uniffi::RustCallStatus,
) {
    // If the provided function does not match the signature specified in the UDL
    // then this attempt to call it will not compile, and will give guidance as to why.
    uniffi::deps::log::debug!("lib_16d0_close_wallet");

    uniffi::call_with_result(call_status, || {
        let _retval = close_wallet(
            match <i32 as uniffi::FfiConverter>::try_lift(wallet_handle) {
                Ok(val) => val,

                Err(err) => {
                    return Err(uniffi::lower_anyhow_error_or_panic::<
                        FfiConverterTypeIndyError2,
                    >(err, "wallet_handle"))
                }
            },
        )
        .map_err(Into::into)
        .map_err(<FfiConverterTypeIndyError2 as uniffi::FfiConverter>::lower)?;
        Ok(_retval)
    })
}

#[doc(hidden)]
#[no_mangle]
pub extern "C" fn lib_16d0_add_wallet_record(
    wallet_handle: i32,
    xtype: uniffi::RustBuffer,
    id: uniffi::RustBuffer,
    value: uniffi::RustBuffer,
    tags_json: uniffi::RustBuffer,
    call_status: &mut uniffi::RustCallStatus,
) {
    // If the provided function does not match the signature specified in the UDL
    // then this attempt to call it will not compile, and will give guidance as to why.
    uniffi::deps::log::debug!("lib_16d0_add_wallet_record");

    uniffi::call_with_result(call_status, || {
        let _retval = add_wallet_record(
            match <i32 as uniffi::FfiConverter>::try_lift(wallet_handle) {
                Ok(val) => val,

                Err(err) => {
                    return Err(uniffi::lower_anyhow_error_or_panic::<
                        FfiConverterTypeIndyError2,
                    >(err, "wallet_handle"))
                }
            },
            match <String as uniffi::FfiConverter>::try_lift(xtype) {
                Ok(ref val) => val,

                Err(err) => {
                    return Err(uniffi::lower_anyhow_error_or_panic::<
                        FfiConverterTypeIndyError2,
                    >(err, "xtype"))
                }
            },
            match <String as uniffi::FfiConverter>::try_lift(id) {
                Ok(ref val) => val,

                Err(err) => {
                    return Err(uniffi::lower_anyhow_error_or_panic::<
                        FfiConverterTypeIndyError2,
                    >(err, "id"))
                }
            },
            match <String as uniffi::FfiConverter>::try_lift(value) {
                Ok(ref val) => val,

                Err(err) => {
                    return Err(uniffi::lower_anyhow_error_or_panic::<
                        FfiConverterTypeIndyError2,
                    >(err, "value"))
                }
            },
            match <String as uniffi::FfiConverter>::try_lift(tags_json) {
                Ok(ref val) => val,

                Err(err) => {
                    return Err(uniffi::lower_anyhow_error_or_panic::<
                        FfiConverterTypeIndyError2,
                    >(err, "tags_json"))
                }
            },
        )
        .map_err(Into::into)
        .map_err(<FfiConverterTypeIndyError2 as uniffi::FfiConverter>::lower)?;
        Ok(_retval)
    })
}

#[doc(hidden)]
#[no_mangle]
pub extern "C" fn lib_16d0_update_wallet_record_value(
    wallet_handle: i32,
    xtype: uniffi::RustBuffer,
    id: uniffi::RustBuffer,
    value: uniffi::RustBuffer,
    call_status: &mut uniffi::RustCallStatus,
) {
    // If the provided function does not match the signature specified in the UDL
    // then this attempt to call it will not compile, and will give guidance as to why.
    uniffi::deps::log::debug!("lib_16d0_update_wallet_record_value");

    uniffi::call_with_result(call_status, || {
        let _retval = update_wallet_record_value(
            match <i32 as uniffi::FfiConverter>::try_lift(wallet_handle) {
                Ok(val) => val,

                Err(err) => {
                    return Err(uniffi::lower_anyhow_error_or_panic::<
                        FfiConverterTypeIndyError2,
                    >(err, "wallet_handle"))
                }
            },
            match <String as uniffi::FfiConverter>::try_lift(xtype) {
                Ok(ref val) => val,

                Err(err) => {
                    return Err(uniffi::lower_anyhow_error_or_panic::<
                        FfiConverterTypeIndyError2,
                    >(err, "xtype"))
                }
            },
            match <String as uniffi::FfiConverter>::try_lift(id) {
                Ok(ref val) => val,

                Err(err) => {
                    return Err(uniffi::lower_anyhow_error_or_panic::<
                        FfiConverterTypeIndyError2,
                    >(err, "id"))
                }
            },
            match <String as uniffi::FfiConverter>::try_lift(value) {
                Ok(ref val) => val,

                Err(err) => {
                    return Err(uniffi::lower_anyhow_error_or_panic::<
                        FfiConverterTypeIndyError2,
                    >(err, "value"))
                }
            },
        )
        .map_err(Into::into)
        .map_err(<FfiConverterTypeIndyError2 as uniffi::FfiConverter>::lower)?;
        Ok(_retval)
    })
}

#[doc(hidden)]
#[no_mangle]
pub extern "C" fn lib_16d0_update_wallet_record_tags(
    wallet_handle: i32,
    xtype: uniffi::RustBuffer,
    id: uniffi::RustBuffer,
    tags_json: uniffi::RustBuffer,
    call_status: &mut uniffi::RustCallStatus,
) {
    // If the provided function does not match the signature specified in the UDL
    // then this attempt to call it will not compile, and will give guidance as to why.
    uniffi::deps::log::debug!("lib_16d0_update_wallet_record_tags");

    uniffi::call_with_result(call_status, || {
        let _retval = update_wallet_record_tags(
            match <i32 as uniffi::FfiConverter>::try_lift(wallet_handle) {
                Ok(val) => val,

                Err(err) => {
                    return Err(uniffi::lower_anyhow_error_or_panic::<
                        FfiConverterTypeIndyError2,
                    >(err, "wallet_handle"))
                }
            },
            match <String as uniffi::FfiConverter>::try_lift(xtype) {
                Ok(ref val) => val,

                Err(err) => {
                    return Err(uniffi::lower_anyhow_error_or_panic::<
                        FfiConverterTypeIndyError2,
                    >(err, "xtype"))
                }
            },
            match <String as uniffi::FfiConverter>::try_lift(id) {
                Ok(ref val) => val,

                Err(err) => {
                    return Err(uniffi::lower_anyhow_error_or_panic::<
                        FfiConverterTypeIndyError2,
                    >(err, "id"))
                }
            },
            match <String as uniffi::FfiConverter>::try_lift(tags_json) {
                Ok(ref val) => val,

                Err(err) => {
                    return Err(uniffi::lower_anyhow_error_or_panic::<
                        FfiConverterTypeIndyError2,
                    >(err, "tags_json"))
                }
            },
        )
        .map_err(Into::into)
        .map_err(<FfiConverterTypeIndyError2 as uniffi::FfiConverter>::lower)?;
        Ok(_retval)
    })
}

#[doc(hidden)]
#[no_mangle]
pub extern "C" fn lib_16d0_add_wallet_record_tags(
    wallet_handle: i32,
    xtype: uniffi::RustBuffer,
    id: uniffi::RustBuffer,
    tags_json: uniffi::RustBuffer,
    call_status: &mut uniffi::RustCallStatus,
) {
    // If the provided function does not match the signature specified in the UDL
    // then this attempt to call it will not compile, and will give guidance as to why.
    uniffi::deps::log::debug!("lib_16d0_add_wallet_record_tags");

    uniffi::call_with_result(call_status, || {
        let _retval = add_wallet_record_tags(
            match <i32 as uniffi::FfiConverter>::try_lift(wallet_handle) {
                Ok(val) => val,

                Err(err) => {
                    return Err(uniffi::lower_anyhow_error_or_panic::<
                        FfiConverterTypeIndyError2,
                    >(err, "wallet_handle"))
                }
            },
            match <String as uniffi::FfiConverter>::try_lift(xtype) {
                Ok(ref val) => val,

                Err(err) => {
                    return Err(uniffi::lower_anyhow_error_or_panic::<
                        FfiConverterTypeIndyError2,
                    >(err, "xtype"))
                }
            },
            match <String as uniffi::FfiConverter>::try_lift(id) {
                Ok(ref val) => val,

                Err(err) => {
                    return Err(uniffi::lower_anyhow_error_or_panic::<
                        FfiConverterTypeIndyError2,
                    >(err, "id"))
                }
            },
            match <String as uniffi::FfiConverter>::try_lift(tags_json) {
                Ok(ref val) => val,

                Err(err) => {
                    return Err(uniffi::lower_anyhow_error_or_panic::<
                        FfiConverterTypeIndyError2,
                    >(err, "tags_json"))
                }
            },
        )
        .map_err(Into::into)
        .map_err(<FfiConverterTypeIndyError2 as uniffi::FfiConverter>::lower)?;
        Ok(_retval)
    })
}

#[doc(hidden)]
#[no_mangle]
pub extern "C" fn lib_16d0_delete_wallet_record_tags(
    wallet_handle: i32,
    xtype: uniffi::RustBuffer,
    id: uniffi::RustBuffer,
    tag_names_json: uniffi::RustBuffer,
    call_status: &mut uniffi::RustCallStatus,
) {
    // If the provided function does not match the signature specified in the UDL
    // then this attempt to call it will not compile, and will give guidance as to why.
    uniffi::deps::log::debug!("lib_16d0_delete_wallet_record_tags");

    uniffi::call_with_result(call_status, || {
        let _retval = delete_wallet_record_tags(
            match <i32 as uniffi::FfiConverter>::try_lift(wallet_handle) {
                Ok(val) => val,

                Err(err) => {
                    return Err(uniffi::lower_anyhow_error_or_panic::<
                        FfiConverterTypeIndyError2,
                    >(err, "wallet_handle"))
                }
            },
            match <String as uniffi::FfiConverter>::try_lift(xtype) {
                Ok(ref val) => val,

                Err(err) => {
                    return Err(uniffi::lower_anyhow_error_or_panic::<
                        FfiConverterTypeIndyError2,
                    >(err, "xtype"))
                }
            },
            match <String as uniffi::FfiConverter>::try_lift(id) {
                Ok(ref val) => val,

                Err(err) => {
                    return Err(uniffi::lower_anyhow_error_or_panic::<
                        FfiConverterTypeIndyError2,
                    >(err, "id"))
                }
            },
            match <String as uniffi::FfiConverter>::try_lift(tag_names_json) {
                Ok(ref val) => val,

                Err(err) => {
                    return Err(uniffi::lower_anyhow_error_or_panic::<
                        FfiConverterTypeIndyError2,
                    >(err, "tag_names_json"))
                }
            },
        )
        .map_err(Into::into)
        .map_err(<FfiConverterTypeIndyError2 as uniffi::FfiConverter>::lower)?;
        Ok(_retval)
    })
}

#[doc(hidden)]
#[no_mangle]
pub extern "C" fn lib_16d0_delete_wallet_record(
    wallet_handle: i32,
    xtype: uniffi::RustBuffer,
    id: uniffi::RustBuffer,
    call_status: &mut uniffi::RustCallStatus,
) {
    // If the provided function does not match the signature specified in the UDL
    // then this attempt to call it will not compile, and will give guidance as to why.
    uniffi::deps::log::debug!("lib_16d0_delete_wallet_record");

    uniffi::call_with_result(call_status, || {
        let _retval = delete_wallet_record(
            match <i32 as uniffi::FfiConverter>::try_lift(wallet_handle) {
                Ok(val) => val,

                Err(err) => {
                    return Err(uniffi::lower_anyhow_error_or_panic::<
                        FfiConverterTypeIndyError2,
                    >(err, "wallet_handle"))
                }
            },
            match <String as uniffi::FfiConverter>::try_lift(xtype) {
                Ok(ref val) => val,

                Err(err) => {
                    return Err(uniffi::lower_anyhow_error_or_panic::<
                        FfiConverterTypeIndyError2,
                    >(err, "xtype"))
                }
            },
            match <String as uniffi::FfiConverter>::try_lift(id) {
                Ok(ref val) => val,

                Err(err) => {
                    return Err(uniffi::lower_anyhow_error_or_panic::<
                        FfiConverterTypeIndyError2,
                    >(err, "id"))
                }
            },
        )
        .map_err(Into::into)
        .map_err(<FfiConverterTypeIndyError2 as uniffi::FfiConverter>::lower)?;
        Ok(_retval)
    })
}

#[doc(hidden)]
#[no_mangle]
pub extern "C" fn lib_16d0_get_wallet_record(
    wallet_handle: i32,
    xtype: uniffi::RustBuffer,
    id: uniffi::RustBuffer,
    options_json: uniffi::RustBuffer,
    call_status: &mut uniffi::RustCallStatus,
) -> uniffi::RustBuffer {
    // If the provided function does not match the signature specified in the UDL
    // then this attempt to call it will not compile, and will give guidance as to why.
    uniffi::deps::log::debug!("lib_16d0_get_wallet_record");

    uniffi::call_with_result(call_status, || {
        let _retval = get_wallet_record(
            match <i32 as uniffi::FfiConverter>::try_lift(wallet_handle) {
                Ok(val) => val,

                Err(err) => {
                    return Err(uniffi::lower_anyhow_error_or_panic::<
                        FfiConverterTypeIndyError2,
                    >(err, "wallet_handle"))
                }
            },
            match <String as uniffi::FfiConverter>::try_lift(xtype) {
                Ok(ref val) => val,

                Err(err) => {
                    return Err(uniffi::lower_anyhow_error_or_panic::<
                        FfiConverterTypeIndyError2,
                    >(err, "xtype"))
                }
            },
            match <String as uniffi::FfiConverter>::try_lift(id) {
                Ok(ref val) => val,

                Err(err) => {
                    return Err(uniffi::lower_anyhow_error_or_panic::<
                        FfiConverterTypeIndyError2,
                    >(err, "id"))
                }
            },
            match <String as uniffi::FfiConverter>::try_lift(options_json) {
                Ok(ref val) => val,

                Err(err) => {
                    return Err(uniffi::lower_anyhow_error_or_panic::<
                        FfiConverterTypeIndyError2,
                    >(err, "options_json"))
                }
            },
        )
        .map_err(Into::into)
        .map_err(<FfiConverterTypeIndyError2 as uniffi::FfiConverter>::lower)?;
        Ok(<String as uniffi::FfiConverter>::lower(_retval))
    })
}

#[doc(hidden)]
#[no_mangle]
pub extern "C" fn lib_16d0_open_wallet_search(
    wallet_handle: i32,
    xtype: uniffi::RustBuffer,
    query_json: uniffi::RustBuffer,
    options_json: uniffi::RustBuffer,
    call_status: &mut uniffi::RustCallStatus,
) -> i32 {
    // If the provided function does not match the signature specified in the UDL
    // then this attempt to call it will not compile, and will give guidance as to why.
    uniffi::deps::log::debug!("lib_16d0_open_wallet_search");

    uniffi::call_with_result(call_status, || {
        let _retval = open_wallet_search(
            match <i32 as uniffi::FfiConverter>::try_lift(wallet_handle) {
                Ok(val) => val,

                Err(err) => {
                    return Err(uniffi::lower_anyhow_error_or_panic::<
                        FfiConverterTypeIndyError2,
                    >(err, "wallet_handle"))
                }
            },
            match <String as uniffi::FfiConverter>::try_lift(xtype) {
                Ok(ref val) => val,

                Err(err) => {
                    return Err(uniffi::lower_anyhow_error_or_panic::<
                        FfiConverterTypeIndyError2,
                    >(err, "xtype"))
                }
            },
            match <String as uniffi::FfiConverter>::try_lift(query_json) {
                Ok(ref val) => val,

                Err(err) => {
                    return Err(uniffi::lower_anyhow_error_or_panic::<
                        FfiConverterTypeIndyError2,
                    >(err, "query_json"))
                }
            },
            match <String as uniffi::FfiConverter>::try_lift(options_json) {
                Ok(ref val) => val,

                Err(err) => {
                    return Err(uniffi::lower_anyhow_error_or_panic::<
                        FfiConverterTypeIndyError2,
                    >(err, "options_json"))
                }
            },
        )
        .map_err(Into::into)
        .map_err(<FfiConverterTypeIndyError2 as uniffi::FfiConverter>::lower)?;
        Ok(<i32 as uniffi::FfiConverter>::lower(_retval))
    })
}

#[doc(hidden)]
#[no_mangle]
pub extern "C" fn lib_16d0_fetch_wallet_search_next_records(
    wallet_handle: i32,
    wallet_search_handle: i32,
    count: u64,
    call_status: &mut uniffi::RustCallStatus,
) -> uniffi::RustBuffer {
    // If the provided function does not match the signature specified in the UDL
    // then this attempt to call it will not compile, and will give guidance as to why.
    uniffi::deps::log::debug!("lib_16d0_fetch_wallet_search_next_records");

    uniffi::call_with_result(call_status, || {
        let _retval = fetch_wallet_search_next_records(
            match <i32 as uniffi::FfiConverter>::try_lift(wallet_handle) {
                Ok(val) => val,

                Err(err) => {
                    return Err(uniffi::lower_anyhow_error_or_panic::<
                        FfiConverterTypeIndyError2,
                    >(err, "wallet_handle"))
                }
            },
            match <i32 as uniffi::FfiConverter>::try_lift(wallet_search_handle) {
                Ok(val) => val,

                Err(err) => {
                    return Err(uniffi::lower_anyhow_error_or_panic::<
                        FfiConverterTypeIndyError2,
                    >(err, "wallet_search_handle"))
                }
            },
            match <u64 as uniffi::FfiConverter>::try_lift(count) {
                Ok(val) => val,

                Err(err) => {
                    return Err(uniffi::lower_anyhow_error_or_panic::<
                        FfiConverterTypeIndyError2,
                    >(err, "count"))
                }
            },
        )
        .map_err(Into::into)
        .map_err(<FfiConverterTypeIndyError2 as uniffi::FfiConverter>::lower)?;
        Ok(<String as uniffi::FfiConverter>::lower(_retval))
    })
}

#[doc(hidden)]
#[no_mangle]
pub extern "C" fn lib_16d0_close_wallet_search(
    wallet_search_handle: i32,
    call_status: &mut uniffi::RustCallStatus,
) {
    // If the provided function does not match the signature specified in the UDL
    // then this attempt to call it will not compile, and will give guidance as to why.
    uniffi::deps::log::debug!("lib_16d0_close_wallet_search");

    uniffi::call_with_result(call_status, || {
        let _retval = close_wallet_search(
            match <i32 as uniffi::FfiConverter>::try_lift(wallet_search_handle) {
                Ok(val) => val,

                Err(err) => {
                    return Err(uniffi::lower_anyhow_error_or_panic::<
                        FfiConverterTypeIndyError2,
                    >(err, "wallet_search_handle"))
                }
            },
        )
        .map_err(Into::into)
        .map_err(<FfiConverterTypeIndyError2 as uniffi::FfiConverter>::lower)?;
        Ok(_retval)
    })
}

#[doc(hidden)]
#[no_mangle]
pub extern "C" fn lib_16d0_generate_wallet_key(
    config: uniffi::RustBuffer,
    call_status: &mut uniffi::RustCallStatus,
) -> uniffi::RustBuffer {
    // If the provided function does not match the signature specified in the UDL
    // then this attempt to call it will not compile, and will give guidance as to why.
    uniffi::deps::log::debug!("lib_16d0_generate_wallet_key");

    uniffi::call_with_result(call_status, || {
        let _retval =
            generate_wallet_key(match <String as uniffi::FfiConverter>::try_lift(config) {
                Ok(ref val) => val,

                Err(err) => {
                    return Err(uniffi::lower_anyhow_error_or_panic::<
                        FfiConverterTypeIndyError2,
                    >(err, "config"))
                }
            })
            .map_err(Into::into)
            .map_err(<FfiConverterTypeIndyError2 as uniffi::FfiConverter>::lower)?;
        Ok(<String as uniffi::FfiConverter>::lower(_retval))
    })
}

#[doc(hidden)]
#[no_mangle]
pub extern "C" fn lib_16d0_create_pool_ledger_config(
    pool_name: uniffi::RustBuffer,
    pool_config: uniffi::RustBuffer,
    call_status: &mut uniffi::RustCallStatus,
) {
    // If the provided function does not match the signature specified in the UDL
    // then this attempt to call it will not compile, and will give guidance as to why.
    uniffi::deps::log::debug!("lib_16d0_create_pool_ledger_config");

    uniffi::call_with_result(call_status, || {
        let _retval = create_pool_ledger_config(
            match <String as uniffi::FfiConverter>::try_lift(pool_name) {
                Ok(ref val) => val,

                Err(err) => {
                    return Err(uniffi::lower_anyhow_error_or_panic::<
                        FfiConverterTypeIndyError2,
                    >(err, "pool_name"))
                }
            },
            match <String as uniffi::FfiConverter>::try_lift(pool_config) {
                Ok(ref val) => val,

                Err(err) => {
                    return Err(uniffi::lower_anyhow_error_or_panic::<
                        FfiConverterTypeIndyError2,
                    >(err, "pool_config"))
                }
            },
        )
        .map_err(Into::into)
        .map_err(<FfiConverterTypeIndyError2 as uniffi::FfiConverter>::lower)?;
        Ok(_retval)
    })
}

#[doc(hidden)]
#[no_mangle]
pub extern "C" fn lib_16d0_open_pool_ledger(
    pool_name: uniffi::RustBuffer,
    config: uniffi::RustBuffer,
    call_status: &mut uniffi::RustCallStatus,
) -> i32 {
    // If the provided function does not match the signature specified in the UDL
    // then this attempt to call it will not compile, and will give guidance as to why.
    uniffi::deps::log::debug!("lib_16d0_open_pool_ledger");

    uniffi::call_with_result(call_status, || {
        let _retval = open_pool_ledger(
            match <String as uniffi::FfiConverter>::try_lift(pool_name) {
                Ok(ref val) => val,

                Err(err) => {
                    return Err(uniffi::lower_anyhow_error_or_panic::<
                        FfiConverterTypeIndyError2,
                    >(err, "pool_name"))
                }
            },
            match <String as uniffi::FfiConverter>::try_lift(config) {
                Ok(ref val) => val,

                Err(err) => {
                    return Err(uniffi::lower_anyhow_error_or_panic::<
                        FfiConverterTypeIndyError2,
                    >(err, "config"))
                }
            },
        )
        .map_err(Into::into)
        .map_err(<FfiConverterTypeIndyError2 as uniffi::FfiConverter>::lower)?;
        Ok(<i32 as uniffi::FfiConverter>::lower(_retval))
    })
}

#[doc(hidden)]
#[no_mangle]
pub extern "C" fn lib_16d0_refresh_pool_ledger(
    pool_handle: i32,
    call_status: &mut uniffi::RustCallStatus,
) {
    // If the provided function does not match the signature specified in the UDL
    // then this attempt to call it will not compile, and will give guidance as to why.
    uniffi::deps::log::debug!("lib_16d0_refresh_pool_ledger");

    uniffi::call_with_result(call_status, || {
        let _retval =
            refresh_pool_ledger(match <i32 as uniffi::FfiConverter>::try_lift(pool_handle) {
                Ok(val) => val,

                Err(err) => {
                    return Err(uniffi::lower_anyhow_error_or_panic::<
                        FfiConverterTypeIndyError2,
                    >(err, "pool_handle"))
                }
            })
            .map_err(Into::into)
            .map_err(<FfiConverterTypeIndyError2 as uniffi::FfiConverter>::lower)?;
        Ok(_retval)
    })
}

#[doc(hidden)]
#[no_mangle]
pub extern "C" fn lib_16d0_list_pools(
    call_status: &mut uniffi::RustCallStatus,
) -> uniffi::RustBuffer {
    // If the provided function does not match the signature specified in the UDL
    // then this attempt to call it will not compile, and will give guidance as to why.
    uniffi::deps::log::debug!("lib_16d0_list_pools");

    uniffi::call_with_result(call_status, || {
        let _retval = list_pools()
            .map_err(Into::into)
            .map_err(<FfiConverterTypeIndyError2 as uniffi::FfiConverter>::lower)?;
        Ok(<String as uniffi::FfiConverter>::lower(_retval))
    })
}

#[doc(hidden)]
#[no_mangle]
pub extern "C" fn lib_16d0_close_pool_ledger(
    pool_handle: i32,
    call_status: &mut uniffi::RustCallStatus,
) {
    // If the provided function does not match the signature specified in the UDL
    // then this attempt to call it will not compile, and will give guidance as to why.
    uniffi::deps::log::debug!("lib_16d0_close_pool_ledger");

    uniffi::call_with_result(call_status, || {
        let _retval =
            close_pool_ledger(match <i32 as uniffi::FfiConverter>::try_lift(pool_handle) {
                Ok(val) => val,

                Err(err) => {
                    return Err(uniffi::lower_anyhow_error_or_panic::<
                        FfiConverterTypeIndyError2,
                    >(err, "pool_handle"))
                }
            })
            .map_err(Into::into)
            .map_err(<FfiConverterTypeIndyError2 as uniffi::FfiConverter>::lower)?;
        Ok(_retval)
    })
}

#[doc(hidden)]
#[no_mangle]
pub extern "C" fn lib_16d0_delete_pool_ledger(
    pool_name: uniffi::RustBuffer,
    call_status: &mut uniffi::RustCallStatus,
) {
    // If the provided function does not match the signature specified in the UDL
    // then this attempt to call it will not compile, and will give guidance as to why.
    uniffi::deps::log::debug!("lib_16d0_delete_pool_ledger");

    uniffi::call_with_result(call_status, || {
        let _retval = delete_pool_ledger(
            match <String as uniffi::FfiConverter>::try_lift(pool_name) {
                Ok(ref val) => val,

                Err(err) => {
                    return Err(uniffi::lower_anyhow_error_or_panic::<
                        FfiConverterTypeIndyError2,
                    >(err, "pool_name"))
                }
            },
        )
        .map_err(Into::into)
        .map_err(<FfiConverterTypeIndyError2 as uniffi::FfiConverter>::lower)?;
        Ok(_retval)
    })
}

#[doc(hidden)]
#[no_mangle]
pub extern "C" fn lib_16d0_set_protocol_version(
    protocol_version: u64,
    call_status: &mut uniffi::RustCallStatus,
) {
    // If the provided function does not match the signature specified in the UDL
    // then this attempt to call it will not compile, and will give guidance as to why.
    uniffi::deps::log::debug!("lib_16d0_set_protocol_version");

    uniffi::call_with_result(call_status, || {
        let _retval = set_protocol_version(
            match <u64 as uniffi::FfiConverter>::try_lift(protocol_version) {
                Ok(val) => val,

                Err(err) => {
                    return Err(uniffi::lower_anyhow_error_or_panic::<
                        FfiConverterTypeIndyError2,
                    >(err, "protocol_version"))
                }
            },
        )
        .map_err(Into::into)
        .map_err(<FfiConverterTypeIndyError2 as uniffi::FfiConverter>::lower)?;
        Ok(_retval)
    })
}

#[doc(hidden)]
#[no_mangle]
pub extern "C" fn lib_16d0_create_and_store_my_did(
    wallet_handle: i32,
    did_json: uniffi::RustBuffer,
    call_status: &mut uniffi::RustCallStatus,
) -> uniffi::RustBuffer {
    // If the provided function does not match the signature specified in the UDL
    // then this attempt to call it will not compile, and will give guidance as to why.
    uniffi::deps::log::debug!("lib_16d0_create_and_store_my_did");

    uniffi::call_with_result(call_status, || {
        let _retval = create_and_store_my_did(
            match <i32 as uniffi::FfiConverter>::try_lift(wallet_handle) {
                Ok(val) => val,

                Err(err) => {
                    return Err(uniffi::lower_anyhow_error_or_panic::<
                        FfiConverterTypeIndyError2,
                    >(err, "wallet_handle"))
                }
            },
            match <String as uniffi::FfiConverter>::try_lift(did_json) {
                Ok(ref val) => val,

                Err(err) => {
                    return Err(uniffi::lower_anyhow_error_or_panic::<
                        FfiConverterTypeIndyError2,
                    >(err, "did_json"))
                }
            },
        )
        .map_err(Into::into)
        .map_err(<FfiConverterTypeIndyError2 as uniffi::FfiConverter>::lower)?;
        Ok(<FfiConverterTypeStringString as uniffi::FfiConverter>::lower(_retval))
    })
}

#[doc(hidden)]
#[no_mangle]
pub extern "C" fn lib_16d0_replace_keys_start(
    wallet_handle: i32,
    tgt_did: uniffi::RustBuffer,
    identity_json: uniffi::RustBuffer,
    call_status: &mut uniffi::RustCallStatus,
) -> uniffi::RustBuffer {
    // If the provided function does not match the signature specified in the UDL
    // then this attempt to call it will not compile, and will give guidance as to why.
    uniffi::deps::log::debug!("lib_16d0_replace_keys_start");

    uniffi::call_with_result(call_status, || {
        let _retval = replace_keys_start(
            match <i32 as uniffi::FfiConverter>::try_lift(wallet_handle) {
                Ok(val) => val,

                Err(err) => {
                    return Err(uniffi::lower_anyhow_error_or_panic::<
                        FfiConverterTypeIndyError2,
                    >(err, "wallet_handle"))
                }
            },
            match <String as uniffi::FfiConverter>::try_lift(tgt_did) {
                Ok(ref val) => val,

                Err(err) => {
                    return Err(uniffi::lower_anyhow_error_or_panic::<
                        FfiConverterTypeIndyError2,
                    >(err, "tgt_did"))
                }
            },
            match <String as uniffi::FfiConverter>::try_lift(identity_json) {
                Ok(ref val) => val,

                Err(err) => {
                    return Err(uniffi::lower_anyhow_error_or_panic::<
                        FfiConverterTypeIndyError2,
                    >(err, "identity_json"))
                }
            },
        )
        .map_err(Into::into)
        .map_err(<FfiConverterTypeIndyError2 as uniffi::FfiConverter>::lower)?;
        Ok(<String as uniffi::FfiConverter>::lower(_retval))
    })
}

#[doc(hidden)]
#[no_mangle]
pub extern "C" fn lib_16d0_replace_keys_apply(
    wallet_handle: i32,
    tgt_did: uniffi::RustBuffer,
    call_status: &mut uniffi::RustCallStatus,
) {
    // If the provided function does not match the signature specified in the UDL
    // then this attempt to call it will not compile, and will give guidance as to why.
    uniffi::deps::log::debug!("lib_16d0_replace_keys_apply");

    uniffi::call_with_result(call_status, || {
        let _retval = replace_keys_apply(
            match <i32 as uniffi::FfiConverter>::try_lift(wallet_handle) {
                Ok(val) => val,

                Err(err) => {
                    return Err(uniffi::lower_anyhow_error_or_panic::<
                        FfiConverterTypeIndyError2,
                    >(err, "wallet_handle"))
                }
            },
            match <String as uniffi::FfiConverter>::try_lift(tgt_did) {
                Ok(ref val) => val,

                Err(err) => {
                    return Err(uniffi::lower_anyhow_error_or_panic::<
                        FfiConverterTypeIndyError2,
                    >(err, "tgt_did"))
                }
            },
        )
        .map_err(Into::into)
        .map_err(<FfiConverterTypeIndyError2 as uniffi::FfiConverter>::lower)?;
        Ok(_retval)
    })
}

#[doc(hidden)]
#[no_mangle]
pub extern "C" fn lib_16d0_store_their_did(
    wallet_handle: i32,
    identity_json: uniffi::RustBuffer,
    call_status: &mut uniffi::RustCallStatus,
) {
    // If the provided function does not match the signature specified in the UDL
    // then this attempt to call it will not compile, and will give guidance as to why.
    uniffi::deps::log::debug!("lib_16d0_store_their_did");

    uniffi::call_with_result(call_status, || {
        let _retval = store_their_did(
            match <i32 as uniffi::FfiConverter>::try_lift(wallet_handle) {
                Ok(val) => val,

                Err(err) => {
                    return Err(uniffi::lower_anyhow_error_or_panic::<
                        FfiConverterTypeIndyError2,
                    >(err, "wallet_handle"))
                }
            },
            match <String as uniffi::FfiConverter>::try_lift(identity_json) {
                Ok(ref val) => val,

                Err(err) => {
                    return Err(uniffi::lower_anyhow_error_or_panic::<
                        FfiConverterTypeIndyError2,
                    >(err, "identity_json"))
                }
            },
        )
        .map_err(Into::into)
        .map_err(<FfiConverterTypeIndyError2 as uniffi::FfiConverter>::lower)?;
        Ok(_retval)
    })
}

#[doc(hidden)]
#[no_mangle]
pub extern "C" fn lib_16d0_key_for_did(
    pool_handle: i32,
    wallet_handle: i32,
    did: uniffi::RustBuffer,
    call_status: &mut uniffi::RustCallStatus,
) -> uniffi::RustBuffer {
    // If the provided function does not match the signature specified in the UDL
    // then this attempt to call it will not compile, and will give guidance as to why.
    uniffi::deps::log::debug!("lib_16d0_key_for_did");

    uniffi::call_with_result(call_status, || {
        let _retval = key_for_did(
            match <i32 as uniffi::FfiConverter>::try_lift(pool_handle) {
                Ok(val) => val,

                Err(err) => {
                    return Err(uniffi::lower_anyhow_error_or_panic::<
                        FfiConverterTypeIndyError2,
                    >(err, "pool_handle"))
                }
            },
            match <i32 as uniffi::FfiConverter>::try_lift(wallet_handle) {
                Ok(val) => val,

                Err(err) => {
                    return Err(uniffi::lower_anyhow_error_or_panic::<
                        FfiConverterTypeIndyError2,
                    >(err, "wallet_handle"))
                }
            },
            match <String as uniffi::FfiConverter>::try_lift(did) {
                Ok(ref val) => val,

                Err(err) => {
                    return Err(uniffi::lower_anyhow_error_or_panic::<
                        FfiConverterTypeIndyError2,
                    >(err, "did"))
                }
            },
        )
        .map_err(Into::into)
        .map_err(<FfiConverterTypeIndyError2 as uniffi::FfiConverter>::lower)?;
        Ok(<String as uniffi::FfiConverter>::lower(_retval))
    })
}

#[doc(hidden)]
#[no_mangle]
pub extern "C" fn lib_16d0_key_for_local_did(
    wallet_handle: i32,
    did: uniffi::RustBuffer,
    call_status: &mut uniffi::RustCallStatus,
) -> uniffi::RustBuffer {
    // If the provided function does not match the signature specified in the UDL
    // then this attempt to call it will not compile, and will give guidance as to why.
    uniffi::deps::log::debug!("lib_16d0_key_for_local_did");

    uniffi::call_with_result(call_status, || {
        let _retval = key_for_local_did(
            match <i32 as uniffi::FfiConverter>::try_lift(wallet_handle) {
                Ok(val) => val,

                Err(err) => {
                    return Err(uniffi::lower_anyhow_error_or_panic::<
                        FfiConverterTypeIndyError2,
                    >(err, "wallet_handle"))
                }
            },
            match <String as uniffi::FfiConverter>::try_lift(did) {
                Ok(ref val) => val,

                Err(err) => {
                    return Err(uniffi::lower_anyhow_error_or_panic::<
                        FfiConverterTypeIndyError2,
                    >(err, "did"))
                }
            },
        )
        .map_err(Into::into)
        .map_err(<FfiConverterTypeIndyError2 as uniffi::FfiConverter>::lower)?;
        Ok(<String as uniffi::FfiConverter>::lower(_retval))
    })
}

#[doc(hidden)]
#[no_mangle]
pub extern "C" fn lib_16d0_set_endpoint_for_did(
    wallet_handle: i32,
    did: uniffi::RustBuffer,
    address: uniffi::RustBuffer,
    transport_key: uniffi::RustBuffer,
    call_status: &mut uniffi::RustCallStatus,
) {
    // If the provided function does not match the signature specified in the UDL
    // then this attempt to call it will not compile, and will give guidance as to why.
    uniffi::deps::log::debug!("lib_16d0_set_endpoint_for_did");

    uniffi::call_with_result(call_status, || {
        let _retval = set_endpoint_for_did(
            match <i32 as uniffi::FfiConverter>::try_lift(wallet_handle) {
                Ok(val) => val,

                Err(err) => {
                    return Err(uniffi::lower_anyhow_error_or_panic::<
                        FfiConverterTypeIndyError2,
                    >(err, "wallet_handle"))
                }
            },
            match <String as uniffi::FfiConverter>::try_lift(did) {
                Ok(ref val) => val,

                Err(err) => {
                    return Err(uniffi::lower_anyhow_error_or_panic::<
                        FfiConverterTypeIndyError2,
                    >(err, "did"))
                }
            },
            match <String as uniffi::FfiConverter>::try_lift(address) {
                Ok(ref val) => val,

                Err(err) => {
                    return Err(uniffi::lower_anyhow_error_or_panic::<
                        FfiConverterTypeIndyError2,
                    >(err, "address"))
                }
            },
            match <String as uniffi::FfiConverter>::try_lift(transport_key) {
                Ok(ref val) => val,

                Err(err) => {
                    return Err(uniffi::lower_anyhow_error_or_panic::<
                        FfiConverterTypeIndyError2,
                    >(err, "transport_key"))
                }
            },
        )
        .map_err(Into::into)
        .map_err(<FfiConverterTypeIndyError2 as uniffi::FfiConverter>::lower)?;
        Ok(_retval)
    })
}

#[doc(hidden)]
#[no_mangle]
pub extern "C" fn lib_16d0_get_endpoint_for_did(
    wallet_handle: i32,
    pool_handle: i32,
    did: uniffi::RustBuffer,
    call_status: &mut uniffi::RustCallStatus,
) -> uniffi::RustBuffer {
    // If the provided function does not match the signature specified in the UDL
    // then this attempt to call it will not compile, and will give guidance as to why.
    uniffi::deps::log::debug!("lib_16d0_get_endpoint_for_did");

    uniffi::call_with_result(call_status, || {
        let _retval = get_endpoint_for_did(
            match <i32 as uniffi::FfiConverter>::try_lift(wallet_handle) {
                Ok(val) => val,

                Err(err) => {
                    return Err(uniffi::lower_anyhow_error_or_panic::<
                        FfiConverterTypeIndyError2,
                    >(err, "wallet_handle"))
                }
            },
            match <i32 as uniffi::FfiConverter>::try_lift(pool_handle) {
                Ok(val) => val,

                Err(err) => {
                    return Err(uniffi::lower_anyhow_error_or_panic::<
                        FfiConverterTypeIndyError2,
                    >(err, "pool_handle"))
                }
            },
            match <String as uniffi::FfiConverter>::try_lift(did) {
                Ok(ref val) => val,

                Err(err) => {
                    return Err(uniffi::lower_anyhow_error_or_panic::<
                        FfiConverterTypeIndyError2,
                    >(err, "did"))
                }
            },
        )
        .map_err(Into::into)
        .map_err(<FfiConverterTypeIndyError2 as uniffi::FfiConverter>::lower)?;
        Ok(<FfiConverterTypeStringOptString as uniffi::FfiConverter>::lower(_retval))
    })
}

#[doc(hidden)]
#[no_mangle]
pub extern "C" fn lib_16d0_set_did_metadata(
    wallet_handle: i32,
    tgt_did: uniffi::RustBuffer,
    metadata: uniffi::RustBuffer,
    call_status: &mut uniffi::RustCallStatus,
) {
    // If the provided function does not match the signature specified in the UDL
    // then this attempt to call it will not compile, and will give guidance as to why.
    uniffi::deps::log::debug!("lib_16d0_set_did_metadata");

    uniffi::call_with_result(call_status, || {
        let _retval = set_did_metadata(
            match <i32 as uniffi::FfiConverter>::try_lift(wallet_handle) {
                Ok(val) => val,

                Err(err) => {
                    return Err(uniffi::lower_anyhow_error_or_panic::<
                        FfiConverterTypeIndyError2,
                    >(err, "wallet_handle"))
                }
            },
            match <String as uniffi::FfiConverter>::try_lift(tgt_did) {
                Ok(ref val) => val,

                Err(err) => {
                    return Err(uniffi::lower_anyhow_error_or_panic::<
                        FfiConverterTypeIndyError2,
                    >(err, "tgt_did"))
                }
            },
            match <String as uniffi::FfiConverter>::try_lift(metadata) {
                Ok(ref val) => val,

                Err(err) => {
                    return Err(uniffi::lower_anyhow_error_or_panic::<
                        FfiConverterTypeIndyError2,
                    >(err, "metadata"))
                }
            },
        )
        .map_err(Into::into)
        .map_err(<FfiConverterTypeIndyError2 as uniffi::FfiConverter>::lower)?;
        Ok(_retval)
    })
}

#[doc(hidden)]
#[no_mangle]
pub extern "C" fn lib_16d0_get_did_metadata(
    wallet_handle: i32,
    tgt_did: uniffi::RustBuffer,
    call_status: &mut uniffi::RustCallStatus,
) -> uniffi::RustBuffer {
    // If the provided function does not match the signature specified in the UDL
    // then this attempt to call it will not compile, and will give guidance as to why.
    uniffi::deps::log::debug!("lib_16d0_get_did_metadata");

    uniffi::call_with_result(call_status, || {
        let _retval = get_did_metadata(
            match <i32 as uniffi::FfiConverter>::try_lift(wallet_handle) {
                Ok(val) => val,

                Err(err) => {
                    return Err(uniffi::lower_anyhow_error_or_panic::<
                        FfiConverterTypeIndyError2,
                    >(err, "wallet_handle"))
                }
            },
            match <String as uniffi::FfiConverter>::try_lift(tgt_did) {
                Ok(ref val) => val,

                Err(err) => {
                    return Err(uniffi::lower_anyhow_error_or_panic::<
                        FfiConverterTypeIndyError2,
                    >(err, "tgt_did"))
                }
            },
        )
        .map_err(Into::into)
        .map_err(<FfiConverterTypeIndyError2 as uniffi::FfiConverter>::lower)?;
        Ok(<String as uniffi::FfiConverter>::lower(_retval))
    })
}

#[doc(hidden)]
#[no_mangle]
pub extern "C" fn lib_16d0_get_my_did_with_metadata(
    wallet_handle: i32,
    my_did: uniffi::RustBuffer,
    call_status: &mut uniffi::RustCallStatus,
) -> uniffi::RustBuffer {
    // If the provided function does not match the signature specified in the UDL
    // then this attempt to call it will not compile, and will give guidance as to why.
    uniffi::deps::log::debug!("lib_16d0_get_my_did_with_metadata");

    uniffi::call_with_result(call_status, || {
        let _retval = get_my_did_with_metadata(
            match <i32 as uniffi::FfiConverter>::try_lift(wallet_handle) {
                Ok(val) => val,

                Err(err) => {
                    return Err(uniffi::lower_anyhow_error_or_panic::<
                        FfiConverterTypeIndyError2,
                    >(err, "wallet_handle"))
                }
            },
            match <String as uniffi::FfiConverter>::try_lift(my_did) {
                Ok(ref val) => val,

                Err(err) => {
                    return Err(uniffi::lower_anyhow_error_or_panic::<
                        FfiConverterTypeIndyError2,
                    >(err, "my_did"))
                }
            },
        )
        .map_err(Into::into)
        .map_err(<FfiConverterTypeIndyError2 as uniffi::FfiConverter>::lower)?;
        Ok(<String as uniffi::FfiConverter>::lower(_retval))
    })
}

#[doc(hidden)]
#[no_mangle]
pub extern "C" fn lib_16d0_list_my_dids_with_metadata(
    wallet_handle: i32,
    call_status: &mut uniffi::RustCallStatus,
) -> uniffi::RustBuffer {
    // If the provided function does not match the signature specified in the UDL
    // then this attempt to call it will not compile, and will give guidance as to why.
    uniffi::deps::log::debug!("lib_16d0_list_my_dids_with_metadata");

    uniffi::call_with_result(call_status, || {
        let _retval = list_my_dids_with_metadata(
            match <i32 as uniffi::FfiConverter>::try_lift(wallet_handle) {
                Ok(val) => val,

                Err(err) => {
                    return Err(uniffi::lower_anyhow_error_or_panic::<
                        FfiConverterTypeIndyError2,
                    >(err, "wallet_handle"))
                }
            },
        )
        .map_err(Into::into)
        .map_err(<FfiConverterTypeIndyError2 as uniffi::FfiConverter>::lower)?;
        Ok(<String as uniffi::FfiConverter>::lower(_retval))
    })
}

#[doc(hidden)]
#[no_mangle]
pub extern "C" fn lib_16d0_abbreviate_verkey(
    tgt_did: uniffi::RustBuffer,
    verkey: uniffi::RustBuffer,
    call_status: &mut uniffi::RustCallStatus,
) -> uniffi::RustBuffer {
    // If the provided function does not match the signature specified in the UDL
    // then this attempt to call it will not compile, and will give guidance as to why.
    uniffi::deps::log::debug!("lib_16d0_abbreviate_verkey");

    uniffi::call_with_result(call_status, || {
        let _retval = abbreviate_verkey(
            match <String as uniffi::FfiConverter>::try_lift(tgt_did) {
                Ok(ref val) => val,

                Err(err) => {
                    return Err(uniffi::lower_anyhow_error_or_panic::<
                        FfiConverterTypeIndyError2,
                    >(err, "tgt_did"))
                }
            },
            match <String as uniffi::FfiConverter>::try_lift(verkey) {
                Ok(ref val) => val,

                Err(err) => {
                    return Err(uniffi::lower_anyhow_error_or_panic::<
                        FfiConverterTypeIndyError2,
                    >(err, "verkey"))
                }
            },
        )
        .map_err(Into::into)
        .map_err(<FfiConverterTypeIndyError2 as uniffi::FfiConverter>::lower)?;
        Ok(<String as uniffi::FfiConverter>::lower(_retval))
    })
}

#[doc(hidden)]
#[no_mangle]
pub extern "C" fn lib_16d0_qualify_did(
    wallet_handle: i32,
    did: uniffi::RustBuffer,
    method: uniffi::RustBuffer,
    call_status: &mut uniffi::RustCallStatus,
) -> uniffi::RustBuffer {
    // If the provided function does not match the signature specified in the UDL
    // then this attempt to call it will not compile, and will give guidance as to why.
    uniffi::deps::log::debug!("lib_16d0_qualify_did");

    uniffi::call_with_result(call_status, || {
        let _retval = qualify_did(
            match <i32 as uniffi::FfiConverter>::try_lift(wallet_handle) {
                Ok(val) => val,

                Err(err) => {
                    return Err(uniffi::lower_anyhow_error_or_panic::<
                        FfiConverterTypeIndyError2,
                    >(err, "wallet_handle"))
                }
            },
            match <String as uniffi::FfiConverter>::try_lift(did) {
                Ok(ref val) => val,

                Err(err) => {
                    return Err(uniffi::lower_anyhow_error_or_panic::<
                        FfiConverterTypeIndyError2,
                    >(err, "did"))
                }
            },
            match <String as uniffi::FfiConverter>::try_lift(method) {
                Ok(ref val) => val,

                Err(err) => {
                    return Err(uniffi::lower_anyhow_error_or_panic::<
                        FfiConverterTypeIndyError2,
                    >(err, "method"))
                }
            },
        )
        .map_err(Into::into)
        .map_err(<FfiConverterTypeIndyError2 as uniffi::FfiConverter>::lower)?;
        Ok(<String as uniffi::FfiConverter>::lower(_retval))
    })
}

#[doc(hidden)]
#[no_mangle]
pub extern "C" fn lib_16d0_get_schema(
    pool_handle: i32,
    wallet_handle: i32,
    submitter_did: uniffi::RustBuffer,
    id: uniffi::RustBuffer,
    options_json: uniffi::RustBuffer,
    call_status: &mut uniffi::RustCallStatus,
) -> uniffi::RustBuffer {
    // If the provided function does not match the signature specified in the UDL
    // then this attempt to call it will not compile, and will give guidance as to why.
    uniffi::deps::log::debug!("lib_16d0_get_schema");

    uniffi::call_with_result(call_status, || {
        let _retval = get_schema(
            match <i32 as uniffi::FfiConverter>::try_lift(pool_handle) {
                Ok(val) => val,

                Err(err) => {
                    return Err(uniffi::lower_anyhow_error_or_panic::<
                        FfiConverterTypeIndyError2,
                    >(err, "pool_handle"))
                }
            },
            match <i32 as uniffi::FfiConverter>::try_lift(wallet_handle) {
                Ok(val) => val,

                Err(err) => {
                    return Err(uniffi::lower_anyhow_error_or_panic::<
                        FfiConverterTypeIndyError2,
                    >(err, "wallet_handle"))
                }
            },
            match <String as uniffi::FfiConverter>::try_lift(submitter_did) {
                Ok(ref val) => val,

                Err(err) => {
                    return Err(uniffi::lower_anyhow_error_or_panic::<
                        FfiConverterTypeIndyError2,
                    >(err, "submitter_did"))
                }
            },
            match <String as uniffi::FfiConverter>::try_lift(id) {
                Ok(ref val) => val,

                Err(err) => {
                    return Err(uniffi::lower_anyhow_error_or_panic::<
                        FfiConverterTypeIndyError2,
                    >(err, "id"))
                }
            },
            match <String as uniffi::FfiConverter>::try_lift(options_json) {
                Ok(ref val) => val,

                Err(err) => {
                    return Err(uniffi::lower_anyhow_error_or_panic::<
                        FfiConverterTypeIndyError2,
                    >(err, "options_json"))
                }
            },
        )
        .map_err(Into::into)
        .map_err(<FfiConverterTypeIndyError2 as uniffi::FfiConverter>::lower)?;
        Ok(<String as uniffi::FfiConverter>::lower(_retval))
    })
}

#[doc(hidden)]
#[no_mangle]
pub extern "C" fn lib_16d0_get_cred_def(
    pool_handle: i32,
    wallet_handle: i32,
    submitter_did: uniffi::RustBuffer,
    id: uniffi::RustBuffer,
    options_json: uniffi::RustBuffer,
    call_status: &mut uniffi::RustCallStatus,
) -> uniffi::RustBuffer {
    // If the provided function does not match the signature specified in the UDL
    // then this attempt to call it will not compile, and will give guidance as to why.
    uniffi::deps::log::debug!("lib_16d0_get_cred_def");

    uniffi::call_with_result(call_status, || {
        let _retval = get_cred_def(
            match <i32 as uniffi::FfiConverter>::try_lift(pool_handle) {
                Ok(val) => val,

                Err(err) => {
                    return Err(uniffi::lower_anyhow_error_or_panic::<
                        FfiConverterTypeIndyError2,
                    >(err, "pool_handle"))
                }
            },
            match <i32 as uniffi::FfiConverter>::try_lift(wallet_handle) {
                Ok(val) => val,

                Err(err) => {
                    return Err(uniffi::lower_anyhow_error_or_panic::<
                        FfiConverterTypeIndyError2,
                    >(err, "wallet_handle"))
                }
            },
            match <String as uniffi::FfiConverter>::try_lift(submitter_did) {
                Ok(ref val) => val,

                Err(err) => {
                    return Err(uniffi::lower_anyhow_error_or_panic::<
                        FfiConverterTypeIndyError2,
                    >(err, "submitter_did"))
                }
            },
            match <String as uniffi::FfiConverter>::try_lift(id) {
                Ok(ref val) => val,

                Err(err) => {
                    return Err(uniffi::lower_anyhow_error_or_panic::<
                        FfiConverterTypeIndyError2,
                    >(err, "id"))
                }
            },
            match <String as uniffi::FfiConverter>::try_lift(options_json) {
                Ok(ref val) => val,

                Err(err) => {
                    return Err(uniffi::lower_anyhow_error_or_panic::<
                        FfiConverterTypeIndyError2,
                    >(err, "options_json"))
                }
            },
        )
        .map_err(Into::into)
        .map_err(<FfiConverterTypeIndyError2 as uniffi::FfiConverter>::lower)?;
        Ok(<String as uniffi::FfiConverter>::lower(_retval))
    })
}

#[doc(hidden)]
#[no_mangle]
pub extern "C" fn lib_16d0_purge_schema_cache(
    wallet_handle: i32,
    options_json: uniffi::RustBuffer,
    call_status: &mut uniffi::RustCallStatus,
) {
    // If the provided function does not match the signature specified in the UDL
    // then this attempt to call it will not compile, and will give guidance as to why.
    uniffi::deps::log::debug!("lib_16d0_purge_schema_cache");

    uniffi::call_with_result(call_status, || {
        let _retval = purge_schema_cache(
            match <i32 as uniffi::FfiConverter>::try_lift(wallet_handle) {
                Ok(val) => val,

                Err(err) => {
                    return Err(uniffi::lower_anyhow_error_or_panic::<
                        FfiConverterTypeIndyError2,
                    >(err, "wallet_handle"))
                }
            },
            match <String as uniffi::FfiConverter>::try_lift(options_json) {
                Ok(ref val) => val,

                Err(err) => {
                    return Err(uniffi::lower_anyhow_error_or_panic::<
                        FfiConverterTypeIndyError2,
                    >(err, "options_json"))
                }
            },
        )
        .map_err(Into::into)
        .map_err(<FfiConverterTypeIndyError2 as uniffi::FfiConverter>::lower)?;
        Ok(_retval)
    })
}

#[doc(hidden)]
#[no_mangle]
pub extern "C" fn lib_16d0_purge_cred_def_cache(
    wallet_handle: i32,
    options_json: uniffi::RustBuffer,
    call_status: &mut uniffi::RustCallStatus,
) {
    // If the provided function does not match the signature specified in the UDL
    // then this attempt to call it will not compile, and will give guidance as to why.
    uniffi::deps::log::debug!("lib_16d0_purge_cred_def_cache");

    uniffi::call_with_result(call_status, || {
        let _retval = purge_cred_def_cache(
            match <i32 as uniffi::FfiConverter>::try_lift(wallet_handle) {
                Ok(val) => val,

                Err(err) => {
                    return Err(uniffi::lower_anyhow_error_or_panic::<
                        FfiConverterTypeIndyError2,
                    >(err, "wallet_handle"))
                }
            },
            match <String as uniffi::FfiConverter>::try_lift(options_json) {
                Ok(ref val) => val,

                Err(err) => {
                    return Err(uniffi::lower_anyhow_error_or_panic::<
                        FfiConverterTypeIndyError2,
                    >(err, "options_json"))
                }
            },
        )
        .map_err(Into::into)
        .map_err(<FfiConverterTypeIndyError2 as uniffi::FfiConverter>::lower)?;
        Ok(_retval)
    })
}

#[doc(hidden)]
#[no_mangle]
pub extern "C" fn lib_16d0_create_key(
    wallet_handle: i32,
    my_key_json: uniffi::RustBuffer,
    call_status: &mut uniffi::RustCallStatus,
) -> uniffi::RustBuffer {
    // If the provided function does not match the signature specified in the UDL
    // then this attempt to call it will not compile, and will give guidance as to why.
    uniffi::deps::log::debug!("lib_16d0_create_key");

    uniffi::call_with_result(call_status, || {
        let _retval = create_key(
            match <i32 as uniffi::FfiConverter>::try_lift(wallet_handle) {
                Ok(val) => val,

                Err(err) => {
                    return Err(uniffi::lower_anyhow_error_or_panic::<
                        FfiConverterTypeIndyError2,
                    >(err, "wallet_handle"))
                }
            },
            match <String as uniffi::FfiConverter>::try_lift(my_key_json) {
                Ok(ref val) => val,

                Err(err) => {
                    return Err(uniffi::lower_anyhow_error_or_panic::<
                        FfiConverterTypeIndyError2,
                    >(err, "my_key_json"))
                }
            },
        )
        .map_err(Into::into)
        .map_err(<FfiConverterTypeIndyError2 as uniffi::FfiConverter>::lower)?;
        Ok(<String as uniffi::FfiConverter>::lower(_retval))
    })
}

#[doc(hidden)]
#[no_mangle]
pub extern "C" fn lib_16d0_set_key_metadata(
    wallet_handle: i32,
    verkey: uniffi::RustBuffer,
    metadata: uniffi::RustBuffer,
    call_status: &mut uniffi::RustCallStatus,
) {
    // If the provided function does not match the signature specified in the UDL
    // then this attempt to call it will not compile, and will give guidance as to why.
    uniffi::deps::log::debug!("lib_16d0_set_key_metadata");

    uniffi::call_with_result(call_status, || {
        let _retval = set_key_metadata(
            match <i32 as uniffi::FfiConverter>::try_lift(wallet_handle) {
                Ok(val) => val,

                Err(err) => {
                    return Err(uniffi::lower_anyhow_error_or_panic::<
                        FfiConverterTypeIndyError2,
                    >(err, "wallet_handle"))
                }
            },
            match <String as uniffi::FfiConverter>::try_lift(verkey) {
                Ok(ref val) => val,

                Err(err) => {
                    return Err(uniffi::lower_anyhow_error_or_panic::<
                        FfiConverterTypeIndyError2,
                    >(err, "verkey"))
                }
            },
            match <String as uniffi::FfiConverter>::try_lift(metadata) {
                Ok(ref val) => val,

                Err(err) => {
                    return Err(uniffi::lower_anyhow_error_or_panic::<
                        FfiConverterTypeIndyError2,
                    >(err, "metadata"))
                }
            },
        )
        .map_err(Into::into)
        .map_err(<FfiConverterTypeIndyError2 as uniffi::FfiConverter>::lower)?;
        Ok(_retval)
    })
}

#[doc(hidden)]
#[no_mangle]
pub extern "C" fn lib_16d0_get_key_metadata(
    wallet_handle: i32,
    verkey: uniffi::RustBuffer,
    call_status: &mut uniffi::RustCallStatus,
) -> uniffi::RustBuffer {
    // If the provided function does not match the signature specified in the UDL
    // then this attempt to call it will not compile, and will give guidance as to why.
    uniffi::deps::log::debug!("lib_16d0_get_key_metadata");

    uniffi::call_with_result(call_status, || {
        let _retval = get_key_metadata(
            match <i32 as uniffi::FfiConverter>::try_lift(wallet_handle) {
                Ok(val) => val,

                Err(err) => {
                    return Err(uniffi::lower_anyhow_error_or_panic::<
                        FfiConverterTypeIndyError2,
                    >(err, "wallet_handle"))
                }
            },
            match <String as uniffi::FfiConverter>::try_lift(verkey) {
                Ok(ref val) => val,

                Err(err) => {
                    return Err(uniffi::lower_anyhow_error_or_panic::<
                        FfiConverterTypeIndyError2,
                    >(err, "verkey"))
                }
            },
        )
        .map_err(Into::into)
        .map_err(<FfiConverterTypeIndyError2 as uniffi::FfiConverter>::lower)?;
        Ok(<String as uniffi::FfiConverter>::lower(_retval))
    })
}

#[doc(hidden)]
#[no_mangle]
pub extern "C" fn lib_16d0_sign(
    wallet_handle: i32,
    signer_vk: uniffi::RustBuffer,
    message: uniffi::RustBuffer,
    call_status: &mut uniffi::RustCallStatus,
) -> uniffi::RustBuffer {
    // If the provided function does not match the signature specified in the UDL
    // then this attempt to call it will not compile, and will give guidance as to why.
    uniffi::deps::log::debug!("lib_16d0_sign");

    uniffi::call_with_result(call_status, || {
        let _retval = sign(
            match <i32 as uniffi::FfiConverter>::try_lift(wallet_handle) {
                Ok(val) => val,

                Err(err) => {
                    return Err(uniffi::lower_anyhow_error_or_panic::<
                        FfiConverterTypeIndyError2,
                    >(err, "wallet_handle"))
                }
            },
            match <String as uniffi::FfiConverter>::try_lift(signer_vk) {
                Ok(ref val) => val,

                Err(err) => {
                    return Err(uniffi::lower_anyhow_error_or_panic::<
                        FfiConverterTypeIndyError2,
                    >(err, "signer_vk"))
                }
            },
            match <std::vec::Vec<u8> as uniffi::FfiConverter>::try_lift(message) {
                Ok(ref val) => val,

                Err(err) => {
                    return Err(uniffi::lower_anyhow_error_or_panic::<
                        FfiConverterTypeIndyError2,
                    >(err, "message"))
                }
            },
        )
        .map_err(Into::into)
        .map_err(<FfiConverterTypeIndyError2 as uniffi::FfiConverter>::lower)?;
        Ok(<std::vec::Vec<u8> as uniffi::FfiConverter>::lower(_retval))
    })
}

#[doc(hidden)]
#[no_mangle]
pub extern "C" fn lib_16d0_verify(
    signer_vk: uniffi::RustBuffer,
    message: uniffi::RustBuffer,
    signature: uniffi::RustBuffer,
    call_status: &mut uniffi::RustCallStatus,
) -> i8 {
    // If the provided function does not match the signature specified in the UDL
    // then this attempt to call it will not compile, and will give guidance as to why.
    uniffi::deps::log::debug!("lib_16d0_verify");

    uniffi::call_with_result(call_status, || {
        let _retval = verify(
            match <String as uniffi::FfiConverter>::try_lift(signer_vk) {
                Ok(ref val) => val,

                Err(err) => {
                    return Err(uniffi::lower_anyhow_error_or_panic::<
                        FfiConverterTypeIndyError2,
                    >(err, "signer_vk"))
                }
            },
            match <std::vec::Vec<u8> as uniffi::FfiConverter>::try_lift(message) {
                Ok(ref val) => val,

                Err(err) => {
                    return Err(uniffi::lower_anyhow_error_or_panic::<
                        FfiConverterTypeIndyError2,
                    >(err, "message"))
                }
            },
            match <std::vec::Vec<u8> as uniffi::FfiConverter>::try_lift(signature) {
                Ok(ref val) => val,

                Err(err) => {
                    return Err(uniffi::lower_anyhow_error_or_panic::<
                        FfiConverterTypeIndyError2,
                    >(err, "signature"))
                }
            },
        )
        .map_err(Into::into)
        .map_err(<FfiConverterTypeIndyError2 as uniffi::FfiConverter>::lower)?;
        Ok(<bool as uniffi::FfiConverter>::lower(_retval))
    })
}

#[doc(hidden)]
#[no_mangle]
pub extern "C" fn lib_16d0_auth_crypt(
    wallet_handle: i32,
    sender_vk: uniffi::RustBuffer,
    recipient_vk: uniffi::RustBuffer,
    message: uniffi::RustBuffer,
    call_status: &mut uniffi::RustCallStatus,
) -> uniffi::RustBuffer {
    // If the provided function does not match the signature specified in the UDL
    // then this attempt to call it will not compile, and will give guidance as to why.
    uniffi::deps::log::debug!("lib_16d0_auth_crypt");

    uniffi::call_with_result(call_status, || {
        let _retval = auth_crypt(
            match <i32 as uniffi::FfiConverter>::try_lift(wallet_handle) {
                Ok(val) => val,

                Err(err) => {
                    return Err(uniffi::lower_anyhow_error_or_panic::<
                        FfiConverterTypeIndyError2,
                    >(err, "wallet_handle"))
                }
            },
            match <String as uniffi::FfiConverter>::try_lift(sender_vk) {
                Ok(ref val) => val,

                Err(err) => {
                    return Err(uniffi::lower_anyhow_error_or_panic::<
                        FfiConverterTypeIndyError2,
                    >(err, "sender_vk"))
                }
            },
            match <String as uniffi::FfiConverter>::try_lift(recipient_vk) {
                Ok(ref val) => val,

                Err(err) => {
                    return Err(uniffi::lower_anyhow_error_or_panic::<
                        FfiConverterTypeIndyError2,
                    >(err, "recipient_vk"))
                }
            },
            match <std::vec::Vec<u8> as uniffi::FfiConverter>::try_lift(message) {
                Ok(val) => val,

                Err(err) => {
                    return Err(uniffi::lower_anyhow_error_or_panic::<
                        FfiConverterTypeIndyError2,
                    >(err, "message"))
                }
            },
        )
        .map_err(Into::into)
        .map_err(<FfiConverterTypeIndyError2 as uniffi::FfiConverter>::lower)?;
        Ok(<std::vec::Vec<u8> as uniffi::FfiConverter>::lower(_retval))
    })
}

#[doc(hidden)]
#[no_mangle]
pub extern "C" fn lib_16d0_auth_decrypt(
    wallet_handle: i32,
    recipient_vk: uniffi::RustBuffer,
    encrypted_message: uniffi::RustBuffer,
    call_status: &mut uniffi::RustCallStatus,
) -> uniffi::RustBuffer {
    // If the provided function does not match the signature specified in the UDL
    // then this attempt to call it will not compile, and will give guidance as to why.
    uniffi::deps::log::debug!("lib_16d0_auth_decrypt");

    uniffi::call_with_result(call_status, || {
        let _retval = auth_decrypt(
            match <i32 as uniffi::FfiConverter>::try_lift(wallet_handle) {
                Ok(val) => val,

                Err(err) => {
                    return Err(uniffi::lower_anyhow_error_or_panic::<
                        FfiConverterTypeIndyError2,
                    >(err, "wallet_handle"))
                }
            },
            match <String as uniffi::FfiConverter>::try_lift(recipient_vk) {
                Ok(ref val) => val,

                Err(err) => {
                    return Err(uniffi::lower_anyhow_error_or_panic::<
                        FfiConverterTypeIndyError2,
                    >(err, "recipient_vk"))
                }
            },
            match <std::vec::Vec<u8> as uniffi::FfiConverter>::try_lift(encrypted_message) {
                Ok(ref val) => val,

                Err(err) => {
                    return Err(uniffi::lower_anyhow_error_or_panic::<
                        FfiConverterTypeIndyError2,
                    >(err, "encrypted_message"))
                }
            },
        )
        .map_err(Into::into)
        .map_err(<FfiConverterTypeIndyError2 as uniffi::FfiConverter>::lower)?;
        Ok(<FfiConverterTypeStringVecU8 as uniffi::FfiConverter>::lower(_retval))
    })
}

#[doc(hidden)]
#[no_mangle]
pub extern "C" fn lib_16d0_anon_crypt(
    recipient_vk: uniffi::RustBuffer,
    message: uniffi::RustBuffer,
    call_status: &mut uniffi::RustCallStatus,
) -> uniffi::RustBuffer {
    // If the provided function does not match the signature specified in the UDL
    // then this attempt to call it will not compile, and will give guidance as to why.
    uniffi::deps::log::debug!("lib_16d0_anon_crypt");

    uniffi::call_with_result(call_status, || {
        let _retval = anon_crypt(
            match <String as uniffi::FfiConverter>::try_lift(recipient_vk) {
                Ok(ref val) => val,

                Err(err) => {
                    return Err(uniffi::lower_anyhow_error_or_panic::<
                        FfiConverterTypeIndyError2,
                    >(err, "recipient_vk"))
                }
            },
            match <std::vec::Vec<u8> as uniffi::FfiConverter>::try_lift(message) {
                Ok(val) => val,

                Err(err) => {
                    return Err(uniffi::lower_anyhow_error_or_panic::<
                        FfiConverterTypeIndyError2,
                    >(err, "message"))
                }
            },
        )
        .map_err(Into::into)
        .map_err(<FfiConverterTypeIndyError2 as uniffi::FfiConverter>::lower)?;
        Ok(<std::vec::Vec<u8> as uniffi::FfiConverter>::lower(_retval))
    })
}

#[doc(hidden)]
#[no_mangle]
pub extern "C" fn lib_16d0_anon_decrypt(
    wallet_handle: i32,
    recipient_vk: uniffi::RustBuffer,
    encrypted_message: uniffi::RustBuffer,
    call_status: &mut uniffi::RustCallStatus,
) -> uniffi::RustBuffer {
    // If the provided function does not match the signature specified in the UDL
    // then this attempt to call it will not compile, and will give guidance as to why.
    uniffi::deps::log::debug!("lib_16d0_anon_decrypt");

    uniffi::call_with_result(call_status, || {
        let _retval = anon_decrypt(
            match <i32 as uniffi::FfiConverter>::try_lift(wallet_handle) {
                Ok(val) => val,

                Err(err) => {
                    return Err(uniffi::lower_anyhow_error_or_panic::<
                        FfiConverterTypeIndyError2,
                    >(err, "wallet_handle"))
                }
            },
            match <String as uniffi::FfiConverter>::try_lift(recipient_vk) {
                Ok(ref val) => val,

                Err(err) => {
                    return Err(uniffi::lower_anyhow_error_or_panic::<
                        FfiConverterTypeIndyError2,
                    >(err, "recipient_vk"))
                }
            },
            match <std::vec::Vec<u8> as uniffi::FfiConverter>::try_lift(encrypted_message) {
                Ok(ref val) => val,

                Err(err) => {
                    return Err(uniffi::lower_anyhow_error_or_panic::<
                        FfiConverterTypeIndyError2,
                    >(err, "encrypted_message"))
                }
            },
        )
        .map_err(Into::into)
        .map_err(<FfiConverterTypeIndyError2 as uniffi::FfiConverter>::lower)?;
        Ok(<std::vec::Vec<u8> as uniffi::FfiConverter>::lower(_retval))
    })
}

#[doc(hidden)]
#[no_mangle]
pub extern "C" fn lib_16d0_pack_message(
    wallet_handle: i32,
    message: uniffi::RustBuffer,
    receiver_keys: uniffi::RustBuffer,
    sender: uniffi::RustBuffer,
    call_status: &mut uniffi::RustCallStatus,
) -> uniffi::RustBuffer {
    // If the provided function does not match the signature specified in the UDL
    // then this attempt to call it will not compile, and will give guidance as to why.
    uniffi::deps::log::debug!("lib_16d0_pack_message");

    uniffi::call_with_result(call_status, || {
        let _retval = pack_message(
            match <i32 as uniffi::FfiConverter>::try_lift(wallet_handle) {
                Ok(val) => val,

                Err(err) => {
                    return Err(uniffi::lower_anyhow_error_or_panic::<
                        FfiConverterTypeIndyError2,
                    >(err, "wallet_handle"))
                }
            },
            match <std::vec::Vec<u8> as uniffi::FfiConverter>::try_lift(message) {
                Ok(ref val) => val,

                Err(err) => {
                    return Err(uniffi::lower_anyhow_error_or_panic::<
                        FfiConverterTypeIndyError2,
                    >(err, "message"))
                }
            },
            match <String as uniffi::FfiConverter>::try_lift(receiver_keys) {
                Ok(ref val) => val,

                Err(err) => {
                    return Err(uniffi::lower_anyhow_error_or_panic::<
                        FfiConverterTypeIndyError2,
                    >(err, "receiver_keys"))
                }
            },
            match <String as uniffi::FfiConverter>::try_lift(sender) {
                Ok(ref val) => val,

                Err(err) => {
                    return Err(uniffi::lower_anyhow_error_or_panic::<
                        FfiConverterTypeIndyError2,
                    >(err, "sender"))
                }
            },
        )
        .map_err(Into::into)
        .map_err(<FfiConverterTypeIndyError2 as uniffi::FfiConverter>::lower)?;
        Ok(<std::vec::Vec<u8> as uniffi::FfiConverter>::lower(_retval))
    })
}

#[doc(hidden)]
#[no_mangle]
pub extern "C" fn lib_16d0_unpack_message(
    wallet_handle: i32,
    jwe: uniffi::RustBuffer,
    call_status: &mut uniffi::RustCallStatus,
) -> uniffi::RustBuffer {
    // If the provided function does not match the signature specified in the UDL
    // then this attempt to call it will not compile, and will give guidance as to why.
    uniffi::deps::log::debug!("lib_16d0_unpack_message");

    uniffi::call_with_result(call_status, || {
        let _retval = unpack_message(
            match <i32 as uniffi::FfiConverter>::try_lift(wallet_handle) {
                Ok(val) => val,

                Err(err) => {
                    return Err(uniffi::lower_anyhow_error_or_panic::<
                        FfiConverterTypeIndyError2,
                    >(err, "wallet_handle"))
                }
            },
            match <std::vec::Vec<u8> as uniffi::FfiConverter>::try_lift(jwe) {
                Ok(ref val) => val,

                Err(err) => {
                    return Err(uniffi::lower_anyhow_error_or_panic::<
                        FfiConverterTypeIndyError2,
                    >(err, "jwe"))
                }
            },
        )
        .map_err(Into::into)
        .map_err(<FfiConverterTypeIndyError2 as uniffi::FfiConverter>::lower)?;
        Ok(<std::vec::Vec<u8> as uniffi::FfiConverter>::lower(_retval))
    })
}
// Object definitions, corresponding to UDL `interface` definitions.

// Callback Interface definitions, corresponding to UDL `callback interface` definitions.

// External and Wrapped types
// Support for external types.

// Types with an external `FfiConverter`...

// More complicated locally `Wrapped` types - we generate FfiConverter.
